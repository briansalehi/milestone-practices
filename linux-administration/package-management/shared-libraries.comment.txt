<p>
Most Linux software relies heavily on <b>shared libraries</b>.<br/>
Binary program files can point to libraries either by name alone or by providing a complete path.
</p>

<p>In the first case, you must configure a <b>library path</b>, a set of directories in which programs should search for libraries.</p>

<p>
The first way to set the library path is to edit <code>/etc/ld.so.config</code> file.<br/>
This file consists of a series of lines, each of which lists one directory in which shared library files may be found.
</p>

<p>
Some distributions have an additional type of line in this file.<br/>
These lines begin with the include directive; they list files that are to be included as if they were part of the main file.<br/>
These lines tell the system to load all of the files in <code>/etc/ld.so.config.d/</code> whose names end in <code>.config</code>.
</p>

<p>
Sometimes it is necessary to change library path. For instance, you might want to test the effect of a new library before using it for all off you programs.<br/>
To do so, you could install the shared libraries in an unusual location and then set the <code>LD_LIBRARY_PATH</code>.
</p>

<p>To set the <code>LD_LIBRARY_PATH</code> environment variable using the bash shell, you can type following command:</p>

<pre class="language-bash command-line" data-user="user" data-host="milestone">
	<code>
		export LD_LIBRARY_PATH=~/.local/testlib:/opt/newlib
	</code>
</pre>

<p>This line adds two directories, <code>~/.local/testlib</code> and <code>/opt/newlib</code>, to the search path.</p>

<p>
Library path problems usually manifest as a program's inability to locate a library.<br/>
First check if library is installed, if not, install it.<br/>
If library is installed but program cannot find it, check which library the program is using by <code>ldd</code> command.
</p>

<pre class="language-bash command-line" data-user="user" data-host="milestone" data-output="2-5">
	<code>
		ldd /bin/ls
		linux-vdso.so.1 (0x00007fff649e9000)
		libcap.so.2 => /usr/lib/libcap.so.2 (0x00007fe43870e000)
		libc.so.6 => /usr/lib/libc.so.6 (0x00007fe438545000)
		/lib64/ld-linux-x86-64.so.2 => /usr/lib64/ld-linux-x86-64.so.2 (0x00007fe438760000)
	</code>
</pre>

<p>
Sometimes, the library's path is hardcoded in the program's binary file.<br/>
When this happens, you may need to create a symbolic link from the location of the library on your sysstem to the location the program expects.
</p>

<p>A similar problem can occur when the program expects a library to have one name but the library has another name.</p>

<p>
Linux doesn't read <code>/etc/ld.so.config</code> every time a program runs.<br/>
Instead, the system relies on a cached list of directories and the files they contain stored in a binary format in <code>/etc/ld.so.cache</code>.
</p>

<p>To rebuild the cache run following command:</p>

<pre class="language-bash command-line" data-user="user" data-host="milestone">
	<code>
		ldconfig
	</code>
</pre>

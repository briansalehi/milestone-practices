#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <random>
using namespace std;
mutex values_mtx;
mutex cout_mtx;
vector<int> values;
void threadFnc(int tid)
{
    cout_mtx.lock();
    cout << "Starting thread " << tid << ".\n";
    cout_mtx.unlock();
    values_mtx.lock();
    int val = values[0];
    values_mtx.unlock();
    int rval = randGen(0, 10);
    val += rval;
}
int randGen(const int& min, const int& max)
{
    static thread_local 
mt19937 generator(hash<thread::id>()(this_thread::get_id()));
    uniform_int_distribution<int> distribution(min, max);
    return distribution(generator);
}
int main()
{
    values.push_back(42);
    thread tr1(threadFnc, 1);
    thread tr2(threadFnc, 2);
    thread tr3(threadFnc, 3);
    thread tr4(threadFnc, 4);
    tr1.join();
    tr2.join();
    tr3.join();
    tr4.join();
    return 0;
}
Of note here is the use of the thread_local keyword. What this means is that even though it is defined as a static variable, its scope will be limited to the thread using it. Every thread will thus create its own generator instance, which is important when using the random number API in the STL.

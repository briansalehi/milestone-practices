<p>When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged.</p>

<pre class="language-bash">
	<code>
		git add README test.rb LICENSE
		git commit -m 'Initial commit'
	</code>
</pre>

<p>When you create the commit by running <code>git commit</code>, Git checksums each subdirectory (in this case, just the root project directory) and stores them as a <i>tree object</i> in the Git repository. Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot when needed.</p>

A Git repository now contains five objects: three blobs (each representing the contents of one of the three files), one tree that lists the contents of the directory and specifies which file names are stored as which blobs, and one commit with the pointer to that root tree and all the commit metadata.

Figure 9. A commit and its tree

If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.

Figure 10. Commits and their parents

A branch in Git is simply a lightweight movable pointer to one of these commits. The default branch name in Git is master. As you start making commits, you’re given a master branch that points to the last commit you made. Every time you commit, the master branch pointer moves forward automatically.

Figure 11. A branch and its commit history

Let’s say you want to create a new branch called testing. You do this with the git branch command:
$ git branch testing
--
change from story form

This creates a new pointer to the same commit you’re currently on.

Figure 12. Two branches pointing into the same series of commits

How does Git know what branch you’re currently on? It keeps a special pointer called HEAD.
--
change from question form

In Git, this is a pointer to the local branch you’re currently on. In this case, you’re still on master. The git branch command only created a new branch — it didn’t switch to that branch.

Figure 13. HEAD pointing to a branch

You can easily see this by running a simple git log command that shows you where the branch pointers are pointing. This option is called --decorate.
$ git log --oneline --decorate
--
change to formal form

To switch to an existing branch, you run the git checkout command. Let’s switch to the new testing branch:
$ git checkout testing

Figure 14. HEAD points to the current branch

$ vim test.rb
$ git commit -a -m 'made a change'

Figure 15. The HEAD branch moves forw

$ git checkout master

Figure 16. HEAD moves when you checkout

That command did two things. It moved the HEAD pointer back to point to the master branch, and it reverted the files in your working directory back to the snapshot that master points to.

$ vim test.rb
$ git commit -a -m 'made other changes'

Now your project history has diverged

Figure 17. Divergent history

You can also see this easily with the git log command. If you run git log --oneline --decorate --graph --all
--
remove if

*****

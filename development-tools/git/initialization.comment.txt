<p>To initialize a project, use <code>git init</code>.</p>

<p>To include files and directories in Git history, just add them using <code>git add &lt;file ...&gt;</code>.</p>

<p>Before initializing a project, you should set the default branch name by <code>git config</code> command:</p>

<pre class="language-bash command-line" data-host="milestone">
	<code>
		git config --global init.defaultBranch &lt;name&gt;
	</code>
</pre>

<p>When you make a commit, Git stores a commit object that contains a pointer to the snapshot of the content you staged.</p>

<pre class="language-bash command-line" data-host="milestone">
	<code>
		git add README test.rb LICENSE
		git commit -m 'Initial commit'
	</code>
</pre>

<p>When you create the commit by running <code>git commit</code>, Git checksums each subdirectory (in this case, just the root project directory) and stores them as a <i>tree object</i> in the Git repository. Git then creates a commit object that has the metadata and a pointer to the root project tree so it can re-create that snapshot when needed.</p>

<p>A Git repository now contains five objects: <b>three blobs</b> (each representing the contents of one of the three files), <b>one tree</b> that lists the contents of the directory and specifies which file names are stored as which blobs, and <b>one commit</b> with the pointer to that root tree and all the commit metadata.</p>

![object-tree.png]

<p>If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.</p>

![chain-of-commits.png]

<p>A <b>branch</b> in Git is simply a lightweight movable pointer to one of these commits. The default branch name in Git is <code>master</code>. As you start making commits, you’re given a master branch that points to the last commit you made. Every time you commit, the master branch pointer moves forward automatically.</p>

![master-branch-history.png]

<p>To create a new branch called <code>testing</code>, use <code>git branch</code> command:</p>

<pre class="language-bash command-line" data-host="milestone">
	<code>
		git branch testing
	</code>
</pre>

<p>This creates a new pointer to the same commit you’re currently on.</p>

![two-commit-pointers.png]

<p>Git knows what branch you’re currently on by keeping a special pointer called <code>HEAD</code>.</p>

<p>In Git, this is a pointer to the local branch you’re currently on. In this case, you’re still on <code>master</code>. The git branch command only created a new branch — it doesn’t switch to that branch.</p>

![head-pointer.png]

<p>You can easily see this by running a simple git log command that shows you where the branch pointers are pointing. This option is called <code>--decorate</code>.</p>

<pre class="language-bash command-line" data-host="milestone">
	<code>
		git log --oneline --decorate
	</code>
</pre>

<p>To switch to an existing branch, you run the <code>git checkout</code> command. Let’s switch to the new <code>testing</code> branch:</p>

<pre class="language-bash command-line" data-host="milestone">
	<code>
		git checkout testing
	</code>
</pre>

![head-pointing-to-new-branch.png]

<pre class="language-bash command-line" data-host="milestone">
	<code>
		vim test.rb
		git commit -a -m 'made a change'
	</code>
</pre>

![new-branch-moves-forward.png]

<pre class="language-bash command-line" data-host="milestone">
	<code>
		git checkout master
	</code>
</pre>

![head-back-to-master-branch.png]

<p>That command did two things. It moved the <code>HEAD</code> pointer back to point to the <code>master</code> branch, and it reverted the files in your working directory back to the snapshot that master points to.</p>

<pre class="language-bash command-line" data-host="milestone">
	<code>
		vim test.rb
		git commit -a -m 'made other changes'
	</code>
</pre>

<p>Now your project history has <i>diverged</i>!</p>

![divergent-history.png]

<p>You can also see this easily with the <code>git log</code> command:</p>

<pre class="language-bash command-line" data-host="milestone">
	<code>
		git log --oneline --decorate --graph --all
	</code>
</pre>

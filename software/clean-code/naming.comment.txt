<h4>Use Intention-Revealing Names</h4>
For example, the name <i>d</i> reveals nothing.
It doesn't evoke a sense of elapsed time, nor of days.
We should choose a name that specifies what is being measured and the unit of
that measurement:

<pre class="language-cpp">
	<code>
		int elapsedTimeInDays;
		int daysSinceCreation;
		int daysSinceModification;
		int fileAgeInDays;
	</code>
</pre>

Sometimes the problem is not the simplicity of the code but the
<i>implicity</i> of it.

<pre class="language-cpp">
	<code>
		int cell[];
		...
		if (cell[0] == 4)
		    ...
	</code>
</pre>

Here, zeroth subscription does not signify anything, neither does the number
4.
By giving concepts names, we make the code readable considerably:

<pre class="language-cpp">
	<code>
		int cell[];
		...
		if (cell[STATUS_VALUE] == FLAGGED)
		...
	</code>
</pre>

Further improvements can also be made by object oriented design:

<pre class="language-cpp">
	<code>
		Cell cell = new Cell;
		...
		if (cell.isFlagged())
		    ...
	</code>
</pre>

<h4>Avoid Disinformation</h4>
Avoid using obsecure naming like <i>hp</i> or similarly abbreviated names.

Don't refer to data structures in names. <i>accountList</i> may lead to false
conclusions unless it really is a list. So only <i>accounts</i> would be
better.

Using inconsistent spellings is disinformation.
A truly aweful example of disinformative names would be the use of
lower-case <i>L</i> or uppercase <i>O</i> as variable names, specially in
combination.
The problem of course, is that they look almost entirely like the constants
one and zero, respectively.

<pre class="language-cpp">
	<code>
		if ( O == l )
		    O = 0;
		else
		    l = 1;
	</code>
</pre>

<h4>Make Meaningful Distinctions</h4>
Noise words like <i>a</i>, <i>an</i>, and <i>the</i> are meaningless
distinction. So do <i>Info</i> and <i>Data</i> in <i>ProductInfo</i> and
<i>ProductData</i> classes.

Noise words are redundant. The word <i>variable</i> should never appear in a
variable name. So does <i>table</i> in a table variable, or string as such.
How is <i>NameString</i> better than <i>Name</i>?

Consider these function names:

<pre class="language-cpp">
	<code>
		getActiveAccount();
		getActiveAccounts();
		getActiveAccountInfo();
	</code>
</pre>

How are the programmers supposed to know which of these fuunctions to call?
Distinguish names in such a way the reader knows what the differences offer.

<h4>Use Pronounceable Names</h4>
Names should be pronouceable in conversations:

<pre class="language-cpp">
	<code>
		Date genymmdhms;
	</code>
</pre>

Hey, Mikey, take a look at "gen emm dee aich emm ess"!

<pre class="language-cpp">
	<code>
		Date generationTimestamp;
	</code>
</pre>

Hey, Mikey, take a look at this record! The generation timestamp is set
to tomorrow's date! How can that be?

<h4>Use Searchable Names</h4>
One might easily grep for <i>MAX_CLASSES_PER_STUDENT</i>, but the number 7
could be more troublesome.

Single-letter names can ONLY be used as local variables inside small methods.
The length of a name should correspond to the size of its scope.

<h4>Avoid Encodings</h4>
We have enough encodings to deal with without adding more to our burden.
Encoded names are seldom pronounceable and are easy to mis-type.

Do not add m_ prefixes to method names, we are way passed that age!

<h4>Avoid Mental Mapping</h4>
This is a problem with single letter variable names.
While using them might not hurt in small scope iterations like <i>i</i> in for
loops, however in most other contexts a single-letter name is poor choice.
It's just a placeholder that the reader must mentally map to the actual
concept.

In general programmers are pretty smart. Smart people sometimes like to show
off their smartness by demonstrating their mental juggling abilities.

One difference between a smart programmer and a professional programmer is
that the professional understands that <b>clarity is king</b>. Professionals
use their power for good and write code that others can understand.

<h4>Class Names</h4>
Classes and objects should have noun or noun phrase names like
</i>Customer</i>, </i>WikiPage</i>, <i>Account</i>, and <i>AddressParser</i>.
Avoid words like <i>Manager</i>, <i>Processor</i>, <i>Data</i>, or
<i>Info</i> in the name of a class.
Also a class name should not be a verb.

<h4>Method Names</h4>
Methods should have a verb or verb phrase names like <i>postsPayment</i>,
<i>deletePage</i>, or save.

<h4>Don't Be Cute</h4>
If names are too clever, they will be memorable only to people who share the
author's sense of humor.
<i>HolyHandGrenade</i> is cute for sure but <i>DeleteItems</i> might
be a better name.
Say what you mean, mean what you say.

<h4>Pick One Word per Concept</h4>
Pick one word for abstract concept and stick with it.
For example, it's confusing to have <i>fetch</i>, <i>get</i>, and
<i>retrieve</i> as equivalent methods of different classes.

A consistent lexicon is a great boon to the programmers who must use your
code.

<h4>Don't Pun</h4>
Avoid using the same word for two purposes.

Using <i>insert</i> and <i>append</i> is a better idea than using only
<i>add</i>.

<h4>Use Solution Domain Names</h4>
Remember that the people who read your code will be programmers.
So go ahead and use computer science (CS) terms, algorithms, pattern
names, math terms and so forth.

<h4>Use Problem Domain Names</h4>
When programmering terms and solution domain names will no longer come
in hand, use domain names.
At least the programmer who maintains your code can ask a domain expert what
it means.

Separating solution and domain concepts is part of the job of a good
programmer and designer.
The code that has more to do with problem domain concepts should have names
drawn from the problem domain.

<h4>Add Meaningful Context</h4>
When you have variable names <i>firstName</i>, <i>lastName</i>, <i>street
</i>, <i>houseNumber</i>, <i>city</i>, <i>state</i>, <i>zipcode</i>, but you
just saw the <i>state</i> variable is being used stand alone in a method, you
can add context by using prefixes:
<i>addrFirstName</i>, <i>addrLastName</i>, <i>addrState</i>, and so on.
Of course, a better solution is to create a class named <i>Address</i>.
Then even the compiler knows that the variables belong to a bigger concept.

<h4>Don't Add Gratuitous Content</h4>
Shorter names are generally better than long ones, so long as they are clear.
Add no more context to a name than is necessary.

The names <i>accountAddress</i> and <i>customerAddress</i> are fine names
for instances of the class <i>Address</i> but could be poor names for classes.
<i>Address</i> is a fine name for a class.

<b>Use Intention-Revealing Names</b>

The name <i>d</i> reveals nothing for example.
It doesn't evoke a sense of elapsed time, nor of days.
We should choose a name that specifies what is being measured and the unit of
that measurement:

<pre><code>
int elapsedTimeInDays
int daysSinceCreation
int daysSinceNodification
int fileAgeInDays
</pre></code>

Sometimes the problem is not the simplicity of the code but the
<i>implicity</i> of it.

<pre><code>
int cell[];
...

if (cell[0] == 4)
</pre></code>

Here, zeroth subscription does not signify anything, neither does the number
4.
By giving concepts names, we make the code readable considerably:

<pre><code>
int cell[]
...
int cell[STATUS_VALUE] = FLAGGED;
</pre></code>

Further improvements can also be made by object oriented design:

<pre><code>
Cell cell = new Cell;
...
if (cell.isFlagged())
</pre></code>

<b>Avoid Disinformation</b>

Avoid using obsecure naming like <<i>hp</i> or similarly abbreviated names.

Don't refer to data structures in names. <i>accountList</i> may lead to false
conclusions unless it really is a list. So only <i>accounts</i> would be
better.

Using inconsistent spellings is disinformation.
A truly aweful example of disinformative names would be the use of
lower-case <i>L</i> or uppercase <i>O</i> as variable names, specially in
combination.
The problem of course, is that they look almost entirely like the constants
one and zero, respectively.

<pre><code>
if ( O == l )
	O = 0;
else
	l = 1;
</pre></code>

<b>Make Meaningful Distinctions</b>

Noise words like a, an, the are meaningless distinction. So as Info and Data
in ProductInffo and ProductData classes.

Noise words are redundant. The word <i>variablee</i> should never appear in a
variable name. So does <i>table</i> in a table, or string.
How is <i>NameString</i> better than <i>Name</i>?

<pre><code>
getActiveAccount();
getActiveAccounts();
getActiveAccountInfo();
</pre></code>

How are the programmers supposed to know which of these fuunctions to call?
Distinguuish names in such a way the reader knows wwhat the differences offer.

<b>Use Pronounceable Names</b>

Names should be pronouceable in conversaations.

Hey, Mikey, take a look at this record! The "gen emm dee aichc emm ess" is set
to tomorrow's date! How can that be?

<pre><code>
Date genymmdhms;
</pre></code>

Hey, Mikey, take a look at this record! The "gen emm dee aichc emm ess" is set
to tomorrow's date! How can that be?

<pre><code>
Date genymmdhms;
</pre></code>

<b>Use Searchable Names</b>

One might easily grep for <i>MAX_CLASSES_PERR_STUDENT</i>, but the number 7
could be more troublesome.

Single-lettere names can ONLY be used as local variables inside methods.
The lenght of a name shouuld correspond to the size of its scope.

<b>Avoid Encodings</b>

We have enough encodings to deal with without adding more to our burden.
Encoded names are seldom pronounceable and are easy to mis-type.

Do not add m_ prefixes to method names, we are way passed that age!

<b>Avoid Mental Mapping</b>

This is a problem with single letter variable names.
While using them might noot hurt in small scope iterations like i in for
loops, however in most other contexts a single-letter name is poor choice.
It's just a placeholder that the reader must mentally map to the actual
concept.

In general programmers are pretty smart. Smart people sometimes like to show
off their smarts by demonstrating their mental juggling aabilities.

One difference between a smart programmer and a professional prograammer is
that the professional understands that clarity is king. Professionals use
their power for good and write code that others can understand.

<b>Class Names</b>

Classes and objects should have noun or noun phrase names like Cuustomer,
WikiPage, Account, and AddressParser. Avoid words like Manager, Processor,
Data, or Info in the name of a class. A class name should not be a verb.

<b>Method Names</b>

Methods should have a vern or verb phrase names like postsPayment,
deleteePage, or save.

<b>Don't Be Cute</b>

If names are too clever, they will be memorable only to people who share the
author's sense of humor.

Sure HolyHaandGrenade is cute by but DeleteItems might bee a better name.

Say what you mean, mean what you say.

<b>Pick One Word per Concept</b>

Pick one word for abstract concept and stick with it.
For example, it's confusing to have fetch, get, and retrieve as equivalent
methods of a different classes.

A consistent lexicon is a great boon to the programmers who must use your
code.

<b>Don't Pun</b>

Avoid using the same word for two purposes.

Using insert and append is a better idea than using only add.

<b>Use Solution Domain Names</b>

RRemember that the people who read your code will be programmers.
So go ahead and use computer science terms, algorithms, pattern names, math
terms and so forth.

<b>Use Problem Domain Names</b>

When computer terms are no longer helping, use domain names.
At least the programmer who maintains your code can ask a domain eexpert what
it means.

Separating solution and domain conceptss is part of the job of a good
programmer and designer.
The code that has more to do with problem domain concepts should have names
drawn from the problem domain.

<b>Add Meaningful Context</b>

When you have varianle names firstName, lastName, street, houseNumber, city,
state, zipcode, but wyou just saw the state variable is being used stand alone
in a method, you can add context by using prefixes: addrFfirstName,
addrLastName, addrState, and so on.
Of course, a better solution is to creatae a class named Address. The, even
the compiler knows that the variables belong to a bigger concept.

<b>Don't Add Gratuitous Content</b>

Shorter names are generally better than long ones, so long as they are clear.
Add no more context to a name than is necessary.

The names accountAddress and customerAddress are fines names for instances of
the class Address but could be poor names for classes. Address is a fine name
for a class.

ref[6]
The design step is perhaps the most important in the process of writing a program.
In this step, we decide how to divide the workings of our program into classes, we
decide how these classes will interact, what data each will store, and what actions
each will perform. Indeed, one of the main challenges that beginning C++ programmers
face is deciding what classes to define to do the work of their program.

While general prescriptions are hard to come by, there are some general rules of
thumb that we can apply when determining how to define our classes.

* Responsibilities: Divide the work into different actors, each with a different responsibility. Try to describe responsibilities using action verbs. These actors form the classes for the program.
* Independence: Define the work for each class to be as independent from other classes as possible. Subdivide responsibilities between classes so that each class has autonomy over some aspect of the program. Give data (as member variables) to the class that has jurisdiction over the actions that re-
quire access to this data.
* Behaviors: Define the behaviors for each class carefully and precisely, so that the consequences of each action performed by a class are well under- stood by other classes with which it interacts. These behaviors define the member functions that this class performs. The set of behaviors for a class is sometimes referred to as a protocol, since we expect the behaviors for a class to hold together as a cohesive unit.

Defining the classes, together with their member variables and member functions,
determines the design of a C++ program. A good programmer will naturally
develop greater skill in performing these tasks over time, as experience teaches him
or her to notice patterns in the requirements of a program that match patterns that
he or she has seen before.
end[6]

<p><code>std::string</code> can be initialized by string literals, paranthesis and initialization list. String objects can also be assigned to each other, copy constructor and move constructor are set properly to handle such assignments.</p>

<pre class="language-cpp line-numbers">
	<code>
		std::string family = "C"; // initializing string by copy assignment operator
		std::string language(family); // initializing by copy constructor
		std::string postfix(2, '+'); // initialize by a character N times
		language.append(postfix); // string concatanation by append method
		std::cout << language << std::endl;
	</code>
</pre>

<p>Algorithms can be used on <code>std::string</code> to perform operations such as <a href="/cpp/stl/algorithms/transform">transforming</a>, <a href="/cpp/stl/algorithms/find">finding</a>, <a href="/cpp/stl/algorithms/sort">sorting</a>, <a href="/cpp/stl/algorithms/erase">truncating</a>, <a href="/cpp/stl/algorithms/replace">replacing</a>, <a href="/cpp/stl/algorithms/reverse">reversing</a> and <a href="/cpp/stl/algorithms/search">searching</a> which will be discussed later on <a href="/cpp/stl/algorithm">algorithms</a>.</p>

<p>One useful algorithm applied on strings are transformations:</p>

<pre class="language-cpp line-numbers">
	<code>
    std::string sample("AbCdEfGhIjK");
    std::cout << "original std::string: " << sample << std::endl;

    transform(sample.begin(), sample.end(), sample.begin(), ::toupper);
    std::cout << "converted to upper case: " << sample << std::endl;

    transform(sample.begin(), sample.end(), sample.begin(), ::tolower);
    std::cout << "converted to lower case: " << sample << std::endl;
	</code>
</pre>

<p>Operators are fully discussed in their own chapter <a href="/cpp/object-orientation/operators">operators</a>, but there is a little useful operator used with string objects, called <a href="/cpp/object-orientation/operators/string-literal-operator">string literal operator</a>.</p>  

<p>Notice that when you use <mark>\0</mark> character in a null terminated string (C-style string) you are actually breaking that string as they represent the end of strings.</p>  

<p>Actually this character is a part of special character list and they can be parsed in your string to do tasks or make signs in a string. To make special characters to look just as they are written, use <code>""s</code> operator at the end of a string literal.</p>

<p>The STL string classes <code>std::string</code> that models a character string and <code>std::wstring</code> that models a wide character string helps you in the following ways:</p>

<ul>
	<li>Reduces the effort of string creation and manipulation</li>
	<li>Increases the stability of the application being programmed by internally managing memory allocation details</li>
	<li>Features copy constructor and assignment operators that automatically ensure that member strings get correctly copied</li>
	<li>Supplies useful utility functions that help in truncating, finding, and erasing to name a few</li>
	<li>Lets you focus efforts on your applicationâ€™s primary requirements rather than on string manipulation details</li>
</ul>

<p>Both <code>std::string</code> and <code>std::wstring</code> are actually template specializations of the same class, namely <code>std::basic_string<T></code> for types <code>char</code> and <code>wchar_t</code>, respectively. When you have learned using one, you can use the same methods and operators on the other.</p>

<p>To use the STL string class, you must include the header <code>&lt;string&gt;</code>.</p>

<p>The <code>std::string</code> class features many overloaded constructors and therefore can be instantiated and initialized in many different ways.</p>

<pre class="language-cpp line-numbers">
	<code>
		const char* constCStyleString = "Hello String!";
		std::string strFromConst(constCStyleString);
		std::string strFromConst = constCStyleString;
		std::string str2("Hello String!");
		std::string str2Copy(str2);
	</code>
</pre>

You can also instruct the constructor of string to accept only the first n characters of the supplied input string:

<pre class="language-cpp">
	<code>
		// Initialize a string to the first 5 characters of another
		std::string strPartialCopy(constCStyleString, 5);
	</code>
</pre>

<p>You can also initialize a <code>std::string</code> to contain a specific number of instances of a particular character:</p>

<pre class="language-cpp">
	<code>
		// Initialize a string object to contain 10 'a's
		std::string strRepeatChars(10, 'a');
	</code>
</pre>

<p>The character contents of an <code>std::string</code> can be accessed via iterators or via an array-like syntax where the offset is supplied, using the subscript <code>operator[]</code>.</p>

<p>A C-style representation of the string can be obtained via member function <code>c_str()</code>.</p>

TODO: listing 16.2 code samples

<p>String concatenation can be achieved by using either the <code>operator+=</code> or the <code>append()</code> member function:</p>

<p>The <code>std::string</code> supplies a <code>find()</code> member function with a few overloaded versions that help find a character or a substring in a given string object.</p>

<pre class="language-cpp line-numbers">
	<code>
		// Find substring "day" in sampleStr, starting at position 0
		size_t charPos = sampleStr.find("day", 0);

		// Check if the substring was found, compare against string::npos
		if (charPos != string::npos)
			std::cout << "First instance of \"day\" was found at position " << charPos;
		else
			std::cout << "Substring not found." << std::endl;
	</code>
</pre>

TODO: also write the sample of finding all instances

<p>The <code>std::string</code> also features find functions such as <code>find_ first_of()</code>, <code>find_first_not_of()</code>, <code>find_last_of()</code>, and <code>find_last_not_of()</code> that assist the programmer in working with strings.</p>

<p>The STL string features a function called <code>erase()</code> that can erase a number of characters when given an offset position and count:</p>

<pre class="language-cpp line-numbers">
	<code>
		std::string sampleStr("Hello String! Wake up to a beautiful day!");
		sampleStr.erase(13, 28); // Hello String!
	</code>
</pre>

<p>A character when supplied with an iterator pointing to it:</p>

<pre class="language-cpp">
	<code>
		sampleStr.erase(iCharS); // iterator points to a specific character
	</code>
</pre>

<p>A number of characters given a range supplied by two iterators that bind the same:</p>

<pre class="language-cpp">
	<code>
		sampleStr.erase(sampleStr.begin(), sampleStr.end()); // erase from begin to end
	</code>
</pre>

<p>The string class also supplies a <code>clear()</code> function that effectively clears the internal buffer and resets the string object.</p>

<p><code>std::string</code> can be reversed easily using the generic algorithm <code>std::reverse()</code>:</p>

<pre class="language-cpp line-numbers">
	<code>
		std::string sampleStr("Hello String! We will reverse you!");
		reverse(sampleStr.begin(), sampleStr.end());
	</code>
</pre>

<p>String case conversion can be effected using the algorithm <code>std::transform()</code>, which applies a user-specified function to every element of a collection.</p>

TODO: code sample in listing 16.7

<p>The <code>std::string</code> class, as you have learned, is actually a specialization of the STL template class <code>std::basic_string&lt;T&gt;</code>. The template declaration of container class basic_string is as follows:</p>

<pre class="language-cpp">
	<code>
		template&lt;class _Elem,  class _Traits,  class _Ax&gt;
		class std::basic_string
	</code>
</pre>

<p>In this template definition, the parameter of utmost importance is the first one: <code>_Elem</code>.</p> 
<p>This is the type collected by the <code>basic_string</code> object. The <code>std::string</code> is therefore the template specialization of <code>basic_string</code> for <code>_Elem=char</code>, whereas the <code>std::wstring</code> is the template specialization of <code>basic_string</code> for <code>_Elem=wchar_t</code>.</p>

<p>In other words, the <code>std::string</code> class is defined as <code>typedef basic_string&lt;char, char_traits&lt;char&gt;, allocator&lt;char&gt;&gt; string;</code></p>

<p>And the <code>std::wstring</code> class is defined as typedef <code>basic_string&lt;wchar_t, char_traits&lt;wchar_t&gt;, allocator&lt;wchar_t&gt;&gt; wstring;</code></p>

<p>So, all string features and functions studied so far are actually those supplied by <code>basic_string</code>, and are therefore also applicable to the <code>std::wstring</code> class.</p>

<p>C++14 compliant versions of the standard library support <code>operator""s</code> that convert the string contained within the quotes, in entirety, to a <code>std::basic_string&lt;t&gt;</code>.</p>

TODO: Listing 16.8 demonstrates

<p>C++14 introduces a literal <code>operator""s</code> in <code>std::chrono</code>, as seen here:</p>

<pre class="language-cpp">
	<code>
		std::chrono::seconds timeInSec(100s); // 100 seconds
		std::string timeinText = "100"s; // string "100"
	</code>
</pre>

<p>The former indicates time in seconds and is an integer literal, while the latter gives a <code>std::string</code>.</p>

<p><code>std::string</code> can be initialized by string literals, paranthesis and initialization list. String objects can also be assigned to each other, copy constructor and move constructor are set properly to handle such assignments.</p>

<pre class="language-cpp line-numbers">
	<code>
		std::string family = "C"; // initializing string by copy assignment operator
		std::string language(family); // initializing by copy constructor
		std::string postfix(2, '+'); // initialize by a character N times
		language.append(postfix); // string concatanation by append method
		std::cout << language << std::endl;
	</code>
</pre>

<p>Algorithms can be used on <code>std::string</code> to perform operations such as <a href="/cpp/stl/algorithms/transform">transforming</a>, <a href="/cpp/stl/algorithms/find">finding</a>, <a href="/cpp/stl/algorithms/sort">sorting</a>, <a href="/cpp/stl/algorithms/erase">truncating</a>, <a href="/cpp/stl/algorithms/replace">replacing</a>, <a href="/cpp/stl/algorithms/reverse">reversing</a> and <a href="/cpp/stl/algorithms/search">searching</a> which will be discussed later on <a href="/cpp/stl/algorithm">algorithms</a>.</p>

<p>One useful algorithm applied on strings are transformations:</p>

<pre class="language-cpp line-numbers">
	<code>
    std::string sample("AbCdEfGhIjK");
    std::cout << "original std::string: " << sample << std::endl;

    transform(sample.begin(), sample.end(), sample.begin(), ::toupper);
    std::cout << "converted to upper case: " << sample << std::endl;

    transform(sample.begin(), sample.end(), sample.begin(), ::tolower);
    std::cout << "converted to lower case: " << sample << std::endl;
	</code>
</pre>

<p>Operators are fully discussed in their own chapter <a href="/cpp/object-orientation/operators">operators</a>, but there is a little useful operator used with string objects, called <a href="/cpp/object-orientation/operators/string-literal-operator">string literal operator</a>.</p>  

<p>Notice that when you use <mark>\0</mark> character in a null terminated string (C-style string) you are actually breaking that string as they represent the end of strings.</p>  

<p>Actually this character is a part of special character list and they can be parsed in your string to do tasks or make signs in a string. To make special characters to look just as they are written, use <code>""s</code> operator at the end of a string literal.</p>

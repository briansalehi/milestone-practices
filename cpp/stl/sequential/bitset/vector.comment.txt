<p>STL supplies the programmer with a class <code>std::vector&lt;bool&gt;</code> (also called bit_vector in some implementations of STL) that overcomes this shortcoming.</p>

<p>The <code>vector&lt;bool&gt;</code> is a partial specialization of the <code>std::vector</code> and is intended for storing boolean data. This class is able to dynamically size itself. Therefore, the programmer does not need to know the number of boolean flags to be stored at  compile time.</p>

<p>To use class <code>std::vector&lt;bool&gt;</code>, include header: <code>&lt;vector&gt;</code></p>

<p>Instantiating a <code>std::vector&lt;bool&gt;</code> is similar to a vector, with some convenient overloads:</p>

<pre class="language-cpp line-numbers">
	<code>
		std::vector<bool> boolFlags1;
	</code>
</pre>

<p>You can also create an object as a copy of another:</p>

<pre class="language-cpp line-numbers">
	<code>
		std::vector<bool> boolFlags2Copy(boolFlags2);
	</code>
</pre>

<p>The <code>std::vector&lt;bool&gt;</code> features the function <code>flip()</code> that toggles the state of the Boolean values in the sequence, similar to the function of <code>std::bitset<>::flip()</code>.</p>

<pre class="language-cpp line-numbers">
	<code>
		std::vector<bool> boolFlags(3);
		boolFlags[0] = true;
		boolFlags[1] = true;
		boolFlags[2] = false;
		boolFlags.push_back(true);
		boolFlags.flip();
	</code>
</pre>

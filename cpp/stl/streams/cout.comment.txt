<p><code>operator&lt;&lt;</code> used when writing into a stream is called the <b>stream insertion operator</b>. You use it when writing to the display, file, and so on.</p>

<p><code>operator&gt;&gt;</code> used when writing a stream into a variable is called the <b>stream extraction operator</b>. You use it when reading input from the keyboard, file, and so on.</p>

<p>When using a stream class, you have the option of specifying <a href="/cpp/fundamentals/string-manipulators">manipulators</a> that perform specific actions for you. <code>std::endl</code> is one such manipulator that you have been using thus far to insert a newline character:</p>

<pre class="language-cpp line-numbers">
	<code>
		std::cout << "This lines ends here" << std::endl;
	</code>
</pre>

<p>It is possible to ask <code>std::cout</code> to display an integer in hexadecimal or in octal notations.</p>

<pre class="language-cpp line-numbers">
	<code>
		std::cout << std::setiosflags(std::ios_base::hex|std::ios_base::showbase|std::ios_base::uppercase);
		std::cout << std::resetiosflags(std::ios_base::hex|std::ios_base::showbase|std::ios_base::uppercase);
		const double Pi = (double)22.0 / 7;
		std::cout << std::setprecision(7) << "Pi = " << Pi << std::endl;
		std::cout << std::fixed << "Fixed Pi = " << Pi << std::endl;
		std::cout << std::scientific << "Scientific Pi = " << Pi << std::endl;
	</code>
</pre>

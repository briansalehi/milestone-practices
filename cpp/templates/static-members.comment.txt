<p>We learned how code in templates begins to exist for the compiler when used and not otherwise. So, how would static member attributes function within a template class?</p>

<p>You learned about <code>static</code> keyword in <a href="/cpp/object-oriented/classes/singleton">singleton classes</a> that declaring a class member static results in the member being shared across all instances of a class. Itâ€™s similar with a template class, too, save for the fact that a <b>static member</b> is shared across all objects of a template class with the same template instantiation. So a static member <code>X</code> within a template class is static within all instances of the class instantiated for <code>int</code>. Similarly, <code>X</code> is also static within all instances of the class specialized for <code>double</code>, independent of the other template instantiation for <code>int</code>. In other words, you can visualize it as the compiler creating two versions of the static member variable in a template class: <code>X_int</code> for template instantiation as <code>int</code> and <code>X_double</code> for template instantiations as <code>double</code>.</p>

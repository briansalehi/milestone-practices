<p><b>Note:</b> Images appearing in this page is subject to copy right and will be replaced by <a href="https://milextone.ir">Milestone</a> properties, DO NOT USE THEM ELSEWHERE.</p>

<p>You may occasionally come across a design where part of your code needs different behavior and you know that you just can't create an interface and implement some classes with it each with different configurations.</p>

<p>Consider a duck simulation game having a <code>Duck</code> super class with predefined behaviors: <code>quack</code>, <code>swim</code>, <code>display</code>.</p>

![duck-simulation.png]

<p>Now you want to add a <code>fly</code> behavior for ducks.</p>

![duck-simulation-with-new-fly-behavior.png]

<p>This change is usually inevitable in applications. No matter how well you design an application, over time it must grow and change or it will die.</p>

<p>Whenever you need to modify a behavior, you’re often forced to track down and change it in all the different subclasses where that behavior is defined, probably introducing new bugs along the way!</p>

![duck-simulation-with-more-bugs.png]

<p>For example we know that <code>fly()</code> and <code>quack()</code> are the parts of the <code>Duck</code> class that vary across ducks. You may think that to separate these behaviors from the <code>Duck</code> class, we’ll pull both methods out of the <code>Duck</code> class and create a new set of classes to represent each behavior.</p>

![duck-simulation-with-behaviors-as-separate-classes.png]

<p>But still you're going to need change a lot whenever new requirements arrive. Luckily, there’s a design principle for just this situation.</p>

<p>The <b>Strategy Pattern</b> defines a family of algorithms, encapsulates each one, and makes them interchangeable.</p>

<p>Identify the aspects of your application that vary and separate them from what stays the same.</p>

<p>In other words, if you’ve got some aspect of your code that is changing, say with every new requirement, then you know you’ve got a behavior that needs to be pulled out and separated from all the stuff that doesn’t change.</p>

<p>Here’s another way to think about this principle: take the parts that vary and encapsulate them, so that later you can alter or extend the parts that vary without affecting those that don’t. All patterns provide a way to let some part of a system vary independently of all other parts.</p>

<p>As simple as this concept is, it forms the basis for almost every design pattern. All patterns provide a way to let some part of a system vary independently of all other parts.</p>

<p>We’ll use an interface to represent each behavior—for instance, <code>FlyBehavior</code> and <code>QuackBehavior</code>—and each implementation of a behavior will implement one of those interfaces.</p>

![duck-simulation-with-separate-interfaces.png]

<p>Notice that all ducks can <code>swim</code>, even <b>Rubber Ducks</b> and <b>Decoy Ducks</b>! So, we are not going to separate them from implementation.</p>

<p>The <b>HAS-A</b> relationship is an interesting one: each duck has a <code>FlyBehavior</code> and a <code>QuackBehavior</code> to which it delegates flying and quacking.</p>

![duck-simulation-with-behaviors-as-compositions.png]

<p>When you put two classes together like this you’re using <b>composition</b>. Instead of inheriting their behavior, the ducks get their behavior by being composed with the right behavior object.</p>

<p>Creating systems using composition gives you a lot more flexibility. Not only does it let you encapsulate a family of algorithms into their own set of classes, but it also lets you change behavior at runtime as long as the object you’re composing with implements the correct behavior interface.</p>

<p>Design to an interface, not an implementation.</p>

![duck-simulation-quack-interface.png]

![duck-simulation-mallardduck-implementaion.png]

![duck-simulation-duck-implementation.png]

![duck-simulation-fly-implementation.png]

![duck-simulation-quack-implementation.png]

![duck-simulation-implementation.png]

![duck-simulation-with-runtime-behavior.png]

![duck-simulation-modelduck-with-dynamic-behavior.png]

![duck-simulation-execution.png]

![duck-simulation-diagram.png]

Initialization list can be used over conventional initializations.

begin[5]
There are two types of initialization that use braced initializer lists:

* Copy list initialization. _T obj = {arg1, arg2, ...};_
* Direct list initialization. _T obj {arg1, arg2, ...};_

In combination with auto type deduction, there is an important difference between copy- and direct
list initialization introduced with C++17.

Starting with C++17, you have the following results:

```cpp
// Copy list initialization
auto a = {11}; // initializer_list<int>
auto b = {11, 22}; // initializer_list<int>

// Direct list initialization
auto c {11}; // int
auto d {11, 22}; // Error, too many elements.
```

Note that for copy list initialization, all the elements in the braced initializer must be of the same
type. For example, the following does not compile:

```cpp
auto b = {11, 22.33}; // Compilation error
```

In earlier versions of the standard (C++11/14), both copy- and direct list initialization deduce an
initializer_list<> :

```cpp
// Copy list initialization
auto a = {11}; // initializer_list<int>
auto b = {11, 22}; // initializer_list<int>

// Direct list initialization
auto c {11}; // initializer_list<int>
auto d {11, 22}; // initializer_list<int>
```
end[5]

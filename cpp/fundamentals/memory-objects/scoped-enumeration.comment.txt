<p>C-style enumerations are defined with <code>enum</code> and their members are visible globally!</p>  

<p>It is a good idea to never use globals as they may give you conflict errors and some other troubles. If you use <code>enum class</code>, all enumeration members will only be visible in their scope and to use them you should specify their scope name following by <b>scope resolution</b> <code>::</code>.</p>

<p><b>Enumerations</b> as explained in the previous practices are not strongly typed, meaning they are not type safe. They are always interpreted as integers, and thus you can compare enumeration values from completely different enumeration types. The strongly-typed <code>enum class</code> enumerations solve this problem. For an <code>enum class</code>, the enumeration value names are not automatically exported to the enclosing scope, which means that you always have to use the scope resolution operator. This also means that you can give shorter names to the enumeration values.</p>

<p>Additionally, the enumeration values are not automatically converted to integers. By default, the underlying type of an enumeration value is an integer, but this can be changed as follows:</p>

<pre class="language-cpp line-numbers">
	<code>
		enum class PieceType : unsigned long
		{
			King = 1,
			Queen,
			Rook = 10,
			Pawn
		};
	</code>
</pre>

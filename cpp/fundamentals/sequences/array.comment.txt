<p><b>Arrays</b> must be initialized the moment they are created.</p>

<pre class="language-cpp">
	<code>
		int myArray[3] = {0};
	</code>
</pre>

<p>You can even drop the <code>0</code> as follows:</p>

<pre class="language-cpp">
	<code>
		int myArray[3] = {};
	</code>
</pre>

<p>An array can also be initialized with an <b>initializer list</b>, in which case the compiler can deduce the size of the array automatically. For example:</p> 

<pre class="language-cpp">
	<code>
		int myArray[] = {1, 2, 3, 4}; // The compiler creates an array of 4 elements
	</code>
</pre>

<p><b>Initialier lists</b> can also hold multiple values and assign them onto an array or similar containers which we will discuss soon.</p>

<p><b>Note:</b> when arrays are declared and left uninitialized, they hold garbage data as their values. It is best practice to always initialize an array with zero. In case of initializing an array with an initializer list, all of its elements will be assigned to zero.</p>

<p>If you do specify the size of the array, and the <b>initializer list</b> has less elements than the given size, the remaining elements are set to <code>0</code>.</p>

<p>To get the size of a stack-based C-style array, you can use the C++17 <code>std::size()</code> function (requires <code>&lt;array&gt;</code>). For example:</p> 

<pre class="language-cpp">
	<code>
		unsigned int arraySize = std::size(myArray);
	</code>
</pre>

<p>If your compiler is not yet C++17 compliant, the old trick to get the size of a stack-based C-style array is to use the <code>sizeof()</code> operator. The <code>sizeof()</code> operator returns the size of its argument in bytes. To get the number of elements in a stack-based array, you divide the size in bytes of the array by the size in bytes of the first element. For example:</p> 

<pre class="language-cpp">
	<code>
			unsigned int arraySize = sizeof(myArray) / sizeof(myArray[0]);
	</code>
</pre>

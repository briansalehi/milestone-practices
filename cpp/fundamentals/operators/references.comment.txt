<p>A <b>reference</b> is an alias for a variable. When you declare a reference, you need to initialize it to a variable. Thus, the reference variable is just a different way to access the data stored in the variable being referenced.</p>

<p>You would declare a reference using the reference <code>operator&amp;</code> as seen in the following statement:</p>

<pre class="language-cpp">
	<code>
		VarType original = Value;
		VarType& ReferenceVariable = original;
	</code>
</pre>

<p>References enable you to work with the memory location they are initialized to. This makes references particularly useful when programming functions.</p>

<p>It would be ideal if we could avoid or eliminate the copy steps, enabling the function to work directly on the data in the caller’s stack. References enable you to do just that. A version of the function without the copy step looks like this:</p>

<pre class="language-cpp">
	<code>
		ReturnType DoSomething(Type& parameter); // note the reference&amp;
	</code>
</pre>

<p>This function would be invoked as the following:</p>

<pre class="language-cpp">
	<code>
		ReturnType Result = DoSomething(argument);
	</code>
</pre>

<p>As the argument is being passed by reference, parameter is not a copy of argument rather an alias of the latter. Additionally, a function that accepts a parameter as a reference can optionally return values using reference parameters.</p>

<p>You might need to have references that are not allowed to change the value of the original variable being aliased. Using <code>const</code> when declaring such references is the way to achieve that:</p>

<pre class="language-cpp line-numbers">
	<code>
		int original = 30;
		const int& constRef = original;
		constRef = 40; // Not allowed: constRef can’t change value in original int&amp;
		ref2 = constRef; // Not allowed: ref2 is not const
		const int& constRef2 = constRef; // OK
	</code>
</pre>

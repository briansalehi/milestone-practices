<p>Notice the expression <b>rvalue</b> and <b>lvalue</b>. When we refer to <b>rvalue</b>, we generally are talking about the right operand of equation. And otherwise, when we refer to <b>lvalue</b>, we are talking about the left operand of the equation.</p>

<p>The difference between <b>rvalue</b> and <b>lvalue</b> is that an <b>lvalue</b> is an <b>object reference</b> and a <b>rvalue</b> is a <b>value</b>. An <b>lvalue</b> always has a defined region of storage, so you can take its address. An <b>rvalue</b> does not necessarily have any storage associated with it.</p>

<p>Examples of <b>rvalues</b> include <a href="/cpp/fundamentals/introduction/literals">literals</a>, the results of most operators and function calls that return nonreferences.</p>

<p>So, <code>++rvalue</code>, increments the <b>rvalue</b> and then assigns to the <b>lvalue</b> if there's any. <code>rvalue++</code>, assigns <b>rvalue</b> to the <b>lvalue</b> if there's any and then increments it. Some might argue that prefix <code>++operator</code> is faster, we will discuss it in <a href="/cpp/object-orientation/operator-overloading">classes and objects</a> chapters.</p>

<p>Itâ€™s important to first understand the difference between prefix and postfix and then use the one that works for you. The result of execution of the postfix operators is that the <b>lvalue</b> is first assigned the <b>rvalue</b> and after that assignment the <b>rvalue</b> is incremented (or decremented).</p>

<p>Prefix operators have exactly the opposite in behavior. The <b>rvalue</b> is first incremented and then assigned to the <b>lvalue</b>.</p>

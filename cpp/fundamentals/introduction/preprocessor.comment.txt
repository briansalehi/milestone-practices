<p>As the name suggests, a preprocessor is a tool that runs before the actual compilation starts. Preprocessor directives are commands to the preprocessor and always start with a pound sign #.</p>

<p>The following table shows some of the most common preprocessor directives.</p>

<table class="table table-dark">
	<thead>
		<tr>
			<th scope="col">#</th>
			<th scope="col">Directive</th>
			<th scope="col">Functionality</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<th scope="row">1</th>
			<td>#include [file]</td>
			<td>The specified file is inserted into the code at the location of the directive.</td>
		</tr>
		<tr>
			<th scope="row">2</th>
			<td>#define [key] [value]</td>
			<td>Every occurrence of the speci- fied key is replaced with the specified value.</td>
		</tr>
		<tr>
			<th scope="row">3</th>
			<td>#ifndef [key] #endif</td>
			<td>Code within the ifdef or ifndef locks are condition- ally included or omitted based on whether the specified key has been defined with #define .</td>
		</tr>
		<tr>
			<th scope="row">4</th>
			<td>#pragma [xyz]</td>
			<td>xyz is compiler dependent. It often allows the programmer to display a warning or error if the directive is reached during preprocessing.</td>
		</tr>
	</tbody>
</table>

<p>One example of using preprocessor directives is to avoid multiple includes.</p>

<pre class="language-cpp line-numbers"><code>
	#ifndef SAMPLE_H
	#define SAMPLE_H
	
	declarations...
	
	#endif
</code></pre>

<p>If your compiler supports the #pragma once directive, and most modern compilers do, then this can be rewritten as follows:</p>

<pre class="language-cpp line-numbers"><code>
	#pragma once
</code></pre>

Dynamic casting can only be applied to polymorphic objects, that is, objects that come from a class with at least one virtual function. Dynamic casting is most often applied for casting pointers within the class hierarchy. If an illegal pointer cast is attempted, then the result is a null pointer.

When you have a pointer to an object of type _A_, and you need to know if you can assign an object's address of another type, say _B_, to that pointer, you can check their compatibility by **dynamic_cast** operator.

This operator will return a null pointer if objects are not compatible.

Note that only classes containing virtual functions can be used in dynamic_cast operator, as they are the only reason that two inherited objects might not match.

References can also be used, but virtual_cast operator will not return null pointer in that case, instead, it will throw a type **bad_cast** exception when two object types don't match.

**bad_cast** class is derived from exception class and is defined in **typeinfo** header file.

Dynamic casting, as the name suggests, is the opposite of static casting and actually executes the cast at runtimeâ€”that is, at application execution time. The result of a dynamic_cast operation can be checked to see whether the attempt at casting suc-ceeded. The typical usage syntax of the dynamic_cast operator is

*****

destination_type* Dest = dynamic_cast<class_type*>(Source);
if(Dest) // Check for success of the casting operation  Dest->CallFunc ();

*****

For example:

*****

Base* objBase = new Derived();
// Perform a downcast Derived* objDer = dynamic_cast<Derived*>(objBase);
if(objDer) // Check for success of the cast  objDer->CallDerivedFunction ();

*****

this mechanism of identifying the type of the object at runtime is called runtime type identification (RTTI).

*****

The return value of a dynamic_cast operation should always be checked for validity. It is NULL when the cast fails.

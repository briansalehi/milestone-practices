<p>A constructor is a special function (or method) invoked during the instantiation of a class to construct an object. Just like functions, constructors can also be overloaded.</p>

<p>A constructor is a special function that takes the name of the class and returns no value.</p>

<p>Constructors are the methods in classes having the same name of the class.</p>

<p>They are invoked right after an object is created.</p>

<p>Either they can have arguments or not.</p>

<p>Constructors have no return value.</p>

<p>An important aspect of classes is the capability to initialize a class’s member data. A constructor is a special member function whose task is to perform such an initialization. It is invoked when a new class object comes into existence. There is an analogous destructor member function that is called when a class object goes out of existence.</p>

<p>So, class Human would have a constructor that is declared like this:</p>

<pre class="language-cpp line-numbers">
	<code>
		class Human
		{
		public:
			Human(); // declaration of a constructor
		};
	</code>
</pre>

<p>This constructor can be implemented either inline within the class or externally outside the class declaration.</p>

<p>An implementation (also called definition) inside the class looks like this:</p>

<pre class="language-cpp line-numbers">
	<code>
		class Human
		{
		public:
			Human()
			{
				// constructor code here
			}
		};
	</code>
</pre>

<p>A variant enabling you to define the constructor outside the class’ declaration looks like this:</p>

<pre class="language-cpp line-numbers">
	<code>
		class Human
		{
		public:
			Human(); // constructor declaration
		};

		// constructor implementation (definition)
		Human::Human()
		{
			// constructor code here
		}
	</code>
</pre>

<p>:: is called the scope resolution operator. For example, Human::dateOfBirth is referring to variable dateOfBirth declared within the scope of class Human. ::dateOfBirth, on the other hand would refer to another variable dateOfBirth in a global scope.</p>

<p>A constructor that is invoked without arguments is called the default constructor. Programming a default constructor is optional.</p>

<p>If you don’t program any constructor, as seen in previous samples, the compiler creates one for you (that constructs member attributes but does not initialize Plain Old Data types such as int to any specific non-zero value).</p>

<p>Constructors can be overloaded just like functions. We can therefore write a constructor that requires Human to be instantiated with a name as a parameter, for example:</p>

<pre class="language-cpp line-numbers">
	<code>
		class Human
		{
		public:
			Human()
			{
				// default constructor code here
			}

			Human(string humansName)
			{
				// overloaded constructor code here
			}
		};
	</code>
</pre>

<p>If you don’t program any constructor, as seen in Listing 9.1, the compiler creates one for you (that constructs member attributes but does not initialize Plain Old Data types such as int to any specific non-zero value).</p>

<p>You can choose to not implement the default constructor to enforce object instantiation with certain minimal parameters as follows:</p>

<pre class="language-cpp line-numbers">
	<code>
		class Human {};
	</code>
</pre>

<p>There is no default constructor available, and given the presence of an overloaded constructor, the C++ compiler does not generate a default constructor for you.</p>

<pre class="language-cpp line-numbers">
	<code>
		class Human
		{
		public:
			// no default constructor declared

			Human(string humansName)
			{
				// overloaded constructor code here
			}
		};
	</code>
</pre>

<p>Note that a default constructor is one that can be instantiated without arguments, and not necessarily one that doesn’t take parameters. So, this constructor with two parameters, both with default values, is a default constructor:</p>

<pre class="language-cpp line-numbers">
	<code>
		class Human
		{
		private:
			string name;

		public:
			// default values for both parameters
			Human(string humansName = "Adam", int humansAge = 25)
			{
				name = humansName;
				age = humansAge;
				std::cout << "Overloaded constructor creates " << name << " at age " << age << std::endl;
			}
		};
	</code>
</pre>

<p>The reason is that class Human can still be instantiated without arguments:</p>

<pre class="language-cpp line-numbers">
	<code>
		Human adam; // Human takes default name "Adam", age 25
	</code>
</pre>

<p>Another way to initialize members is by using <a href="/cpp/object-orientation/classes/constructor-initialization-list">constructor initialization lists</a>.</p>

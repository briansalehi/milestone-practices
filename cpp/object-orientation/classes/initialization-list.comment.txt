<p>Constructors can have a special way of assigning their parameters to the class members. By using initialization lists after constructor parameters and before their body scope, you can skip assignments in body of constructors and directly assign parameters to class members.</p>

<p>Thus, the initialization list is characterized by a colon (:) following the parameter  declaration contained in parentheses (â€¦), followed by an individual member variable and the value it is initialized to. This initialization value can be a parameter such as  humansName or can even be a fixed value. Initialization lists can also be useful in  invoking base class constructors with specific arguments.</p>

<pre class="language-cpp line-numbers">
	<code>
		class Human
		{
		private:
			string name;
			int age;

		public:
			// two parameters to initialize members age and name
			Human(string humansName, int humansAge) :name(humansName), age(humansAge)
			{
				std::cout << "Constructed a human called " << name;
				std::cout << ", " << age << " years old" << std::endl;
			}
			// ... other class members
		};
	</code>
</pre>

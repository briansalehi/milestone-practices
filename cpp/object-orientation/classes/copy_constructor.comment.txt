<p>When you pass a variable by value to a function, that function will copy that value and assigns that to its parameter. That is, after invoking that function, you will have two of those values on memory. This also happens when you pass an object to a function by values. Classes do not have any idea how to copy their members into new location by themselves. So that's out job to make sure an object will be copied properly when it's passed to a function.</p>

<p>The copy constructor is an overloaded constructor that you supply. It is invoked by the compiler every time an object of the class is copied.</p>

<p>The declaration syntax of a copy constructor for class MyString is the following:</p>

<pre class="language-cpp line-numbers">
	<code>
		class MyString
		{
		public:
			MyString(const MyString& copySource); // copy constructor
		};

		MyString::MyString(const MyString& copySource)
		{
			// Copy constructor implementation code
		}
	</code>
</pre>

<p>Copy constructors are declared just like default constructors except that they have a reference of the object as their parameters with no return value.</p>

<p>Thus, a copy constructor takes an object of the same class by reference as a parameter. This parameter is an alias of the source object and is the handle you have in writing your custom copy code. You would use the copy constructor to ensure a deep copy of all buffers in the source.</p>

<p>Using const in the copy constructor declaration ensures that the copy constructor does not modify the source object being referred to.</p>

<p>Additionally, the parameter in the copy constructor is passed by reference as a necessity. If this werenâ€™t a reference, the copy constructor would itself invoke a copy, thus invoking itself again and so on till the system runs out of memory.</p>

<p>There are cases where objects are subjected to copy steps automatically, due to the nature of the language and its needs. Consider the following:</p>

<pre class="language-cpp line-numbers">
	<code>
		class MyString
		{
		public:
			MyString(const MyString& copySource); // copy constructor
		};

		MyString::MyString(const MyString& copySource)
		{
			// Copy constructor implementation code
		}

		MyString Copy(MyString& source) // function
		{
			MyString copyForReturn(source.GetString()); // create copy
			return copyForReturn; // return by value invokes copy constructor
		}

		int main()
		{
			MyString sayHello("Hello World of C++");
			MyString sayHelloAgain(Copy(sayHello)); // invokes 2x copy constructor
			return 0;
		}
	</code>
</pre>

<p>As the comment indicates, in the instantiation of sayHelloAgain, the copy constructor was invoked twice, thus a deep copy was performed twice because of our call to function Copy(sayHello) that returns a MyString by value. However, this value returned is very temporary and is not available outside this expression. So, the copy constructor invoked in good faith by the C++ compiler is a burden on performance. This impact becomes significant if our class were to contain objects of great size.</p>

<p>To avoid this performance bottleneck, versions of C++ starting with C++11 feature a <a href="/cpp/object-orientation/classes/move-constructor">move constructor</a> in addition to a copy constructor which will be discussed next page.</p>

<p>The copy constructor is usually implemented with the copy assignment operator, which is discussed in greater detail in <a href="/cpp/object-orientation/operators/copy-assignment-operator">copy assignment operator</a>.</p>

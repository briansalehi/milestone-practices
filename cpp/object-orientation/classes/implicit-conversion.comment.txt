<p><b>Single-argument</b> constructors are used to convert different types into the object.</p>

<p>Constructors can be overloaded, that is, they may take one or more parameters. This feature is often used to convert one type to another. Let’s consider a class <code>Human</code> that features an overloaded constructor that accepts an integer.</p>

<pre class="language-cpp line-numbers" data-line="5">
	<code>
		class Human
		{
			int age;
		public:
			Human(int humansAge): age(humansAge) {}
		};

		// Function that takes a Human as a parameter
		void DoSomething(Human person)
		{
			std::cout &lt;&lt; "Human sent did something" &lt;&lt; std::endl;
		}
	</code>
</pre>

<p>This constructor allows a conversion:</p>

<pre class="language-cpp line-numbers">
	<code>
		Human kid(10); // convert int into a Human
		DoSomething(kid);
	</code>
</pre>

<p>Such converting constructors allow implicit conversions:</p>

<pre class="language-cpp line-numbers">
	<code>
		Human anotherKid = 11; // int converted to Human
		DoSomething(10); // 10 converted to Human!
	</code>
</pre>

<p>We declared <code>DoSomething(Human person)</code> as a function that accepts a parameter of type <code>Human</code> and does not accept an <code>int</code>!</p>

<p>So, why did that line work?</p>
<p>The compiler knows that class <code>Human</code> supports a constructor that accepts an integer and performed an implicit conversion for you—it created an object of type <code>Human</code> using the integer you supplied and sent it as an argument to the function.</p>

<p>To avoid implicit conversions, use keyword <code>explicit</code> at the time of declaring the constructor:</p>

<pre class="language-cpp line-numbers" data-line="5">
	<code>
		class Human
		{
			int age;
		public:
			explicit Human(int humansAge): age(humansAge) {}
		};
	</code>
</pre>

<p>Using <code>explicit</code> is not a prerequisite but in many cases a good programming practice. The following sample demonstrates a version of class <code>Human</code> that does not permit implicit conversions.</p>

<p>The problem of implicit conversions and avoiding them using keyword <code>explicit</code> applies to operators too. Remember to note the usage of <code>explicit</code> when programming conversion operators introduced to you in <a href="/cpp/object-oriented/operator-verloading">operator overloading</a>.</p>

<p>One important motive to use <code>explicit</code> conversion over implicit is, simply, compile-time errors are better than run-time errors!</p>

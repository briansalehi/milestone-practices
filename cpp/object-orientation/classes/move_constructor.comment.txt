<p>Move semantics are helpful when there's a big object which we cannot afford having another copy of it. In this situation when there's not enough memory to just have a few copies of an object, we need to directly move those objects when they are passed as arguments or they are returned from functions.</p>

<p>To make <i>move semantics</i> happen, we need to declare a <i>move constructor</i>, the way we declared a copy constructor. Instead, here we have two & operators meaning the move operator. And there's another difference between move constructor and a copy constructor, and that's we set the source members to NULL after we moved them to the destination. This way, source will no longer exist, and the object is moved to the destination. No extra memory occupied. To make sure object is moved we also use <i>std::move()</i> function.</p>

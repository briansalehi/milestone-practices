<p>A union is a special class type where only one of the non-static data members is active at a time. Thus, a union can accommodate multiple data members, just like a class can, with the exception that only one of them can actually be used.</p>

<p>A union is declared using keyword union, followed by the name of the union and its data members within braces:</p>

<pre class="language-cpp line-numbers">
	<code>
		union UnionName
		{
			Type1 member1;
			Type2 member2;
			…  TypeN memberN;
		};
	</code>
</pre>

<p>You would instantiate and use a union like this:</p>

<pre class="language-cpp line-numbers">
	<code>
		UnionName unionObject;
		unionObject.member2 = value; // choose member2 as the active member
	</code>
</pre>

<p>Similar to the struct, the members of a union are public by default. Unlike a struct, however, unions cannot be used in inheritance hierarchies.</p>

<p>Additionally, the sizeof() a union is always fixed as the size of the largest member contained in the union—even if that mem-ber were inactive in an instance of the union.</p>

<p>Often a union is used as a member of a struct to model a complex data type. In some implementations, the ability of a union to interpret the fixed memory space as another type is used for type conversions or memory reinterpretation—a practice that is controversial and not necessary given alternatives.</p>

<p>C++17 is expected to introduce a typesafe alternative to a union called <a href="/cpp/object-oriented/classes/variant/">variant</a>.</p>

<p>Unions too, are classes in C++ and their members are public by default unless otherwise is specified.</p>  

<p>Unions can be used in complex types as we did here in this practice.</p>  

<p>They have the same concept as they have in C. Only one member of a union can be occupied at a time.</p>

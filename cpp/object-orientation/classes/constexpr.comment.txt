<p><b>Constant expressions</b> are special functions evaluated in compile time. They can boost your programs when used.</p>  

<p>It is possible to define a constructor as a constant expression too, using keyword <i>constexpr</i>. In special cases where such a construct would be useful from a performance point of view, you would use it at the constructor declaration.</p>

<p>Fortunately, we can take advantage of them in classes too. We can make constant expression constructors and methods to have them evaluated in compile time. Also, object creations can be specified as constant expressions too.</p>  

<pre class="language-cpp line-numbers">
	<code>
		class Sample
		{
		private:
			const char* someString;

		public:
			constexpr Sample(const char* input) : someString(input)
			{
				// constructor code
			}
		};
	</code>
</pre>

<p>In this sample, we will have our number variable evaluated in compile time!</p>

<p>By marking functions that operate on constants or const-expressions as <i>constexpr</i>, we are instructing the compiler to evaluate those functions and insert their result instead of inserting instructions that compute the result when the application is executed. This keyword can also be used with classes and objects that evaluate as constants as demonstrated in the source section. Note that the compiler would ignore <i>constexpr</i> when the function or class is used with entities that are not constant.</p>

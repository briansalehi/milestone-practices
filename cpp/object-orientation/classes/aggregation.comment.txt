<p>You were shortly introduced to <code>initializer_list</code>s previously. The thing is, objects can be initialized by <code>initializer_list</code>s. We could initialize objects in multiple forms:</p>  

<pre class="language-cpp line-numbers">
	<code>
		Aggregate1 agg1("Cxx", 11);
	</code>
</pre>

<p>or</p>

<pre class="language-cpp line-numbers">
	<code>
		Aggregate1 agg1;
		agg1.name = "Cxx";
		agg1.number = 11;
	</code>
</pre>

<p>But using <code>initializer_list</code>s we simply put all of the values of different types in one box and set them to an object.</p>

<p>The following initialization syntax is called an <b>aggregate initialization</b> syntax:</p>

<pre class="language-cpp line-numbers">
	<code>
		Type objectName = {argument1, …, argumentN}; // copy list initialization
		// Alternatively, since C++11:
		Type objectName {argument1, …, argumentN}; // direct list initialization
	</code>
</pre>

<p>There are restrictions imposed by the standard on the specification of a <code>struct</code> or a <code>class</code> that can be called an <b>aggregate</b>. These restrictions get nuanced depending on the version of C++ standard that you refer to. Yet, it can be safely said that classes/structs that comprise <code>public</code> and <b>non-static</b> data members, contain no <code>private</code> or <code>protected</code> data members, contain no <code>virtual</code> member functions, feature none or only <code>public</code> inheritance (that is, no <code>private</code>, <code>protected</code>, or <code>virtual</code> inheritance), and no user-defined constructors are <b>aggregates</b> too and can be initialized as one.</p>

<p>Thus, the following <code>struct</code> fulfills the prerequisites of being an <b>aggregate</b> and hence, can be initialized as one:</p>

<pre class="language-cpp line-numbers">
	<code>
		// declaration
		struct Aggregate1
		{
			int num;
			double pi;
		};

		// initialization
		Aggregate1 a1{ 2017, 3.14 };
	</code>
</pre>


<p>Another example:</p>

<pre class="language-cpp line-numbers">
	<code>
		// declaration
		struct Aggregate2
		{
			int num;
			char hello[6];
			int impYears[5];
		};

		// initialization
		Aggregate2 a2 {42, {'h', 'e', 'l', 'l', 'o'}, {1998, 2003, 2011, 2014, 2017}};
	</code>
</pre>

<p><b>Aggregate initialization</b> will initialize only the first non-static member of a <code>union</code>. Therefore, for sake of clarity, it may be a good idea to not use <b>aggregate initialization</b> syntax on <code>union</code>.</p>

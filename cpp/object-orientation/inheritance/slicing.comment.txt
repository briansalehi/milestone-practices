<p>What happens when a programmer does the following?</p>

<pre class="language-cpp line-number">
	<code>
		Derived objDerived;
		Base objectBase = objDerived;
	</code>
</pre>

<p>Or, alternatively, what if a programmer does this?</p>

<pre class="language-cpp line-number">
	<code>
		void UseBase(Base input);
		...
		Derived objDerived;
		UseBase(objDerived); // copy of objDerived will be sliced and sent
	</code>
</pre>

<p>In both cases, an object of type <code>Derived</code> is being copied into another of type <code>Base</code>, either explicitly via assignment or by passing as an argument. What happens in these cases is that the compiler copies only the <code>Base</code> part of <code>objDerived</code>—that is, not the complete object. The information contained by the data members belonging to <code>Derived</code> is lost in the process. This is not anticipated, and this unwanted reduction of that part of data that makes the <code>Derived</code> a specialization of <code>Base</code> is called <b>slicing</b>.</p>

<p>To avoid slicing problems, don’t pass parameters <b>by value</b>. Pass them as <b>pointers</b> to the base class or as a (optionally const) <b>reference</b> to the same.</p>

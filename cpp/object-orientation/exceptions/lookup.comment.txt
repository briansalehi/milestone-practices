<p>Where an exception is thrown, using <code>throw</code>, the compiler inserts a dynamic lookup for a compatible <code>catch(Type)</code> that can handle this exception. The exception handling logic first checks if the line throwing the exception is within a try block. If so, it seeks the <code>catch(Type)</code> that can handle the exception of this Type. If the <code>throw</code> statement is not within a try block or if there is no compatible <code>catch()</code> for the exception type, the exception handling logic seeks the same in the calling function. So, the exception handling logic climbs the stack, one calling function after another, seeking a suitable <code>catch(Type)</code> that can handle the exception. At each step in the stack unwinding procedure, the variables local to that function are destroyed in reverse sequence of their construction.</p>



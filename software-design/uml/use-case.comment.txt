<p>Once you have captured an initial set of actors that interact with your system, you can assemble the exact model of those interactions. The next step is to find cases where the system is being used to complete a specific job for an actor—use cases, in fact. Use cases can be identified from your user's requirements.</p>

<p>A use case is a case (or situation) where your system is used to fulfill one or more of your user's requirements; a use case captures a piece of functionality that the system provides.</p>

<p>A use case, or job, might be as simple as allowing the user to log in or as complex as executing a distributed transaction across multiple global databases. The important thing to remember is that a use case—from the user's perspective—is a complete use of the system; there is some interaction with the system, as well as some output from that interaction. For example, Requirement A.1 describes one main use of the CMS: to create a new blog account. following figure shows how this interaction is captured as a use case.</p>

![use-case-sample.png]

<p>A use case in UML is drawn as an oval with a name that describes the interaction that it represents.</p>

<p>A use case is something that provides some measurable result to the user or an external system.  Any piece of system behavior that meets this simple test is likely to be a good candidate for a use case.</p>

<p>Use cases are an excellent starting point for just about every facet of object-oriented system development, design, testing, and documentation.  They describe a system's requirements strictly from the outside looking in; they specify the value that the system delivers to users.</p>

<p>Because use cases are your system's functional requirements, they should be the first serious output from your model after a project is started.</p>

<p>Use cases specify only what your system is supposed to do, i.e., the system's functional requirements.</p>

<p>The terms <b>shall</b> and <b>should</b> have a special and exact meaning when it comes to requirements. A <i>shall requirement</i> must be fulfilled; if the feature that implements a shall requirement is not in the final system, then the system does not meet this requirement. A <i>should requirement</i> implies that the requirement is not critical to the system working but is still desirable.  If a system's development is running into problems that will cause delivery delays, then it's often the should requirements that are sacrificed first.</p>

<p>If use cases are truly requirements, then they must have very clear pass/fail criteria.</p>

<p>There's actually no specific "best way" to start analyzing requirements, but one useful first step is to look at the things that interact with your system. In use cases, these external things are called <a href="/software-design/uml/actors">actors</a>.</p>

<p>A communication line connects an actor and a use case to show the actor participating in the use case. In this example, the Administrator actor is involved in the creation of a new blog account use case.</p>

![communication-line-sample.png]

<p>There is potential to have any number of actors involved in a use case. There is no theoretical limit to the number of actors that can participate in a use case.</p>

![multiple-actors.png]

<h4>System Boundaries</h4>

<p>Although there is an implicit separation between actors (external to your system) and use cases (internal to your system) that marks your system's boundary, UML does provide another small piece of notation if you want to make things crystal clear. To show your system's boundary on a use case diagram, draw a box around all of the use cases but keep the actors outside of the box. It's also good practice to name your box after the system you are developing, as shown for the CMS in following figure.</p>

![system-boundaries.png]

<h4>Use Case Description</h4>

<p>A diagram showing your use cases and actors may be a nice starting point, but it does not provide enough detail for your system designers to actually understand exactly how the system's concerns will be met. How can a system designer understand who the most important actor is from the use case notation alone? What steps are involved in the use case? The best way to express this important information is in the form of a text-based description—every use case should be accompanied by one.</p>

<table class="table table-dark">
  <thead>
    <tr>
      <th scope="col">#</th>
      <th scope="col">Use case description detail</th>
      <th scope="col">What the detail means and why is it useful?</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th scope="row">1</th>
      <td>Related Requirements</td>
      <td>Some indication as to which requirements this use case partially or
completely fulfills.</td>
    </tr>
    <tr>
      <th scope="row">2</th>
      <td>Goal in Context</td>
      <td>The use case's place within the system and why this use case is
important.</td>
    </tr>
    <tr>
      <th scope="row">3</th>
      <td>Preconditions</td>
      <td>What needs to happen before the use case can be executed.</td>
    </tr>
    <tr>
      <th scope="row">4</th>
      <td>Successful End Condition</td>
      <td>What the system's condition should be if the use case executes
successully.</td>
    </tr>
    <tr>
      <th scope="row">5</th>
      <td>Failed End Condition</td>
      <td>What the system condition should be if the use case failed to
execute successfully.</td>
    </tr>
    <tr>
      <th scope="row">6</th>
      <td>Primary Actors</td>
      <td>The main actors that participate in the use case. Often includes the
actors that trigger or directly receive information from a use case's
execution.</td>
    </tr>
    <tr>
      <th scope="row">7</th>
      <td>Secondary Actors</td>
      <td>Actors that participate but are not the main players in a use case's
execution.</td>
    </tr>
    <tr>
      <th scope="row">8</th>
      <td>Trigger</td>
      <td>The event triggered by an actor that causes the use case to execute.</td>
    </tr>
    <tr>
      <th scope="row">9</th>
      <td>Main Flow</td>
      <td>The place to describe each of the important steps in use case's
normal execution.</td>
    </tr>
    <tr>
      <th scope="row">10</th>
      <td>Extensions</td>
      <td>A description of any alternative steps from the ones described in
the Main Flow.</td>
    </tr>
  </tbody>
</table>

<p>The &lt;&lt;include&gt;&gt; relationship declares that the use case at the head of the dotted arrow completely reuses all of the steps from the use case being included. In the following figure, the Create a new Blog Account and Create a new Personal Wiki completely reuse all of the steps declared in the Check Identity use case.</p>

![include-relationship.png]

<h4>Inheritance (Specialized Use Case)</h4>

<p>Currently, the Content Management System contains a single Create a new Blog Account use case that describes the steps required to create an account. But what if the CMS supports several different types of blog accounts, and the steps required to create each of these accounts differs ever so slightly from the original use case? You want to describe the general behavior for creating a blog account—captured in the Create a new Blog Account use case—and then define specialized use cases in which the account being created is a specific type, such as a regular account with one blog or an editorial account that can make changes to entries in a set of blogs.</p>

<p>This is where use case generalization comes in. A more common way of referring to generalization is using the term inheritance . Use case inheritance is useful when you want to show that one use case is a special type of another use case. To show use case inheritance , use the generalization arrow to connect the more general, or parent, use case to the more specific use case.  The following figure shows how you could extend the CMS's use cases to show that two different types of blog accounts can be created.</p>

![specialized-use-case.png]

<p>But be careful—by using inheritance, you are effectively saying that every step in the general use case must occur in the specialized use cases. Also, every relationship that the general use case has with external actors or use cases, as shown with the &lt;&lt;include&gt;&gt; relationship between Create a new Blog Account and Check Identity, must also make sense in the more specialized use cases, such as Create a new Editorial Blog Account.</p>

<p>If you really don't want your more specific use case to do everything that the general use case describes, then don't use generalization. Instead, you might want to consider using either the &lt;&lt;include&gt;&gt; relationship shown in the previous section or the &lt;&lt;extend&gt;&gt; relationship coming up in the next section.</p>

<p>Following figure shows you how &lt;&lt;extend&gt;&gt; works.</p>

![extend-relationship.png]

<p>The designers of UML 2.0 took a very different view as to the meaning of &lt;&lt;extend&gt;&gt; between use cases. They wanted a means for you to show that a use case might completely reuse another use case's behavior, similar to the &lt;&lt;include&gt;&gt; relationship, but that this reuse was optional and dependent either on a runtime or system implementation decision.</p>

<p>The &lt;&lt;extend&gt;&gt; relationship is ideal in this sort of reuse situation, as shown in the following figure.</p>

![extend-example-in-diagram.png]

<h4>Use Case Overview</h4>

<p>When you are trying to understand a system, it is sometimes useful to get a glimpse of the context within which it sits. For this purpose, UML provides the Use Case Overview diagram. Use Case Overview diagrams give you an opportunity to paint a broad picture of your system's context or domain.</p>

![use-case-overview.png]

<p><b>Use cases</b> allow your model to describe what your system must be able to do; <b>classes</b> allow your model to describe the different types of parts that make up your system's structure.</p>

<p>With use cases and classes alone, you can't yet model how your system is actually going to its job. This is where <b>interaction diagrams</b>, and specifically <b>sequence diagrams</b>, come into play.</p>

<p><b>Sequence diagrams</b> are an important member of the group known as <b>interaction diagrams</b>.</p>

<p><b>Interaction diagrams</b> model important <b>runtime interactions</b> between the parts that make up your system and form part of the <b>logical view</b> of your model.</p>

![logical-view-diagram.png]

<p><b>Sequence diagrams</b> are not alone in this group; they work alongside <a href="/software-design/uml/interaction-diagrams/communication-diagram">communication diagrams</a> and <a href="/software-design/uml/interaction-diagrams/timing-diagram">timing diagrams</a> to help you accurately model how the parts that make up your system interact.</p>

<p><b>Sequence diagrams</b> are the most popular of the three <b>interaction diagram</b> types. This could be because they show the right sorts of information or simply because they tend to make sense to people new to UML.</p>

<p><b>Sequence diagrams</b> are all about capturing the order of interactions between parts of your system. Using a sequence diagram, you can describe which interactions will be triggered when a particular use case is executed and in what order those interactions will occur.</p>

<p>A <b>sequence diagram</b> is made up of a collection of participants—the parts of your system that interact with each other during the sequence. Where a participant is placed on a sequence diagram is important. Regardless of where a participant is placed vertically, participants are always arranged horizontally with no two participants overlapping each other.</p>

![sequence-diagram-participants.png]

<p>Each participant has a corresponding lifeline running down the page. A participant's <b>lifeline</b> simply states that the part exists at that point in the sequence and is only really interesting when a part is created and/or deleted during a sequence.</p>

<p>Participants on a sequence diagram can be named in number of different ways, picking elements from the standard format:</p>

<pre class="language-bash command-line" data-output="1" data-host="milestone">
	<code>
		name [selector] : class_name ref decomposition
	</code>
</pre>

<p>A sequence diagram describes the order in which the interactions take place, so time is an important factor. How time relates to a sequence diagram is shown in the following figure.</p>

![participants-lifetime.png]

<p>Time on a sequence diagram is all about <b>ordering</b>, not <b>duration</b>.</p>

<p>The smallest part of an interaction is an <b>event</b>. An event is any point in an interaction where something occurs.</p>

![signals-in-sequence-diagram.png]

<p><b>Events</b> are the building blocks for signals and messages.</p>

<p>In terms of sequence diagrams, <b>signals</b> and <b>messages</b> act and look the same, so we'll stick to using the term "messages" here.</p>

<p>The elements of the format that you pick to use for a particular participant will depend on the information known about a participant at a given time, as explained in the following table:</p>

<table class="table table-dark">
	<thead>
		<tr>
			<th scope="col">Example participant name</th>
			<th scope="col">Description</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td><code>admin</code></td>
			<td>A part is named <code>admin</code>, but at this point in time the part has not been assigned a class.</td>
		</tr>
		<tr>
			<td><code>: ContentManagementSystem</code></td>
			<td>The class of the participant is <code>ContentManagementSystem</code>, but the part currently does not have its own name.</td>
		</tr>
		<tr>
			<td><code>admin : Administrator</code></td>
			<td>There is a part that has a name of <code>admin</code> and is of the class <code>Adminisitrator</code>.</td>
		</tr>
		<tr>
			<td><code>evenHandlers [2] : EventHandler</code></td>
			<td>There is a part that is accessed within an array at element 2, and it is of the class <code>EventHandler</code>.</td>
		</tr>
		<tr>
			<td><code>: ContentManagementSystem ref cmsInteraction</code></td>
			<td>The participant is of the class <code>ContentManagementSystem</code>, and there is another interaction diagram called <code>cmsInteraction</code> that shows how the participant works internally.</td>
		</tr>
	</tbody>
</table>

<p>An interaction in a sequence diagram occurs when one participant decides to send a message to another participant.</p>

![messages-in-sequence-diagram.png]

<p>Messages on a sequence diagram are specified using an arrow from the participant that wants to pass the message, the Message Caller, to the participant that is to receive the message, the Message Receiver. Messages can flow in whatever direction makes sense for the required interaction—from left to right, right to left, or even back to the Message Caller itself. Think of a message as an event that is passed from a Message Caller to get the Message Receiver to do something.</p>

<p>A message arrow comes with a description, or signature. The format for a message signature is:</p>

<pre class="language-bash command-line" data-output="1" data-host="milestone">
	<code>
		attribute = signal_or_message_name (arguments) : return_type
	</code>
</pre>

<p>You can specify any number of different arguments on a message, each separated using a comma. The format of an argument is:</p>

<pre class="language-bash command-line" data-output="1" data-host="milestone">
	<code>
		&lt;name&gt;:&lt;class&gt;
	</code>
</pre>

<p>The elements of the format that you use for a particular message will depend on the information known about a particular message at any given time, as explained in the following table:</p>

<table class="table table-dark">
	<thead>
		<tr>
			<th scope="col">Example message signature</th>
			<th scope="col">Description</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td><code>doSomething()</code></td>
			<td>The message's name is <code>doSomething</code>, but no further information is known about it.</td>
		</tr>
		<tr>
			<td><code>doSomething(number1: Number, number2 : Number)</code></td>
			<td>The message's name is <code>doSomething</code>, and it takes two arguments, <code>number1</code> and <code>number2</code>, which are both of class <code>Number</code>.</td>
		</tr>
		<tr>
			<td><code>doSomething() : ReturnClass</code></td>
			<td>The message's name is <code>doSomething</code>; it takes no arguments and returns an object of class <code>ReturnClass</code>.</td>
		</tr>
		<tr>
			<td><code>myVar = doSomething() : ReturnClass</code></td>
			<td>The message's name is <code>doSomething</code>; it takes no arguments, and it returns an object of class <code>ReturnClass</code> that is assigned to the <code>myVar</code> attribute of the message caller.</td>
		</tr>
	</tbody>
</table>

<p>When a message is passed to a participant it triggers, or invokes, the receiving participant into doing something; at this point, the receiving participant is said to be active. To show that a participant is active, i.e., doing something, you can use an activation bar</p>

![activation-bars.png]

<p>When a message from one participant results in one or more messages being sent by the receiving participant, those resulting messages are said to be <b>nested</b> within the <b>triggering message</b>.</p>

![nested-messages.png]

<p>The type of arrowhead that is on a message is also important when understanding what type of message is being passed. For example, the Message Caller may want to wait for a message to return before carrying on with its work—a synchronous message. Or it may wish to just send the message to the Message Receiver without waiting for any return as a form of "fire and forget" message—an asynchronous message. Sequence diagrams need to show these different types of message using various message arrows.</p>

![message-arrow-types.png]

<p>As mentioned before, a synchronous message is invoked when the Message Caller waits for the Message Receiver to return from the message invocation.</p>

<p>The interaction shown in the following figure is implemented in Java using nothing more than a simple method invocation.</p>

![single-synchronous-message.png]

<pre class="language-java line-numbers">
	<code>
		public class MessageReceiver
		{
			public void foo(  )
			{	  // Do something inside foo.
			}
		}

		public class MessageCaller
		{
		   private MessageReceiver messageReceiver;
		 
		   // Other Methods and Attributes of the class are declared here
		 
		   // The messageRecevier attribute is initialized elsewhere in
		   // the class.
		 
		   public doSomething(String[] args)
		   {
			  // The MessageCaller invokes the foo(  ) method
		 
			  this.messageReceiver.foo(  ); // then waits for the method to return
		 
			  // before carrying on here with the rest of its work
		   }
		}
	</code>
</pre>

<p>An <b>asynchronous message</b> is invoked by a Message Caller on a Message Receiver, but the Message Caller does not wait for the message invocation to return before carrying on with the rest of the interaction's steps. This means that the Message Caller will invoke a message on the Message Receiver and the Message Caller will be busy invoking further messages before the original message returns.</p>

![synchronous-message-sample.png]

<p>The <b>return message</b> is an optional piece of notation that you can use at the end of an activation bar to show that the control flow of the activation returns to the participant that passed the original message. In code, a return arrow is similar to reaching the end of a method or explicitly calling a return statement.</p>

<p>Participants do not necessarily live for the entire duration of a sequence diagram's interaction. Participants can be created and destroyed according to the messages that are being passed.</p>

![participants-creation-in-sequence-diagram.png]

<p>To show that a participant is created, you can either simply pass a <code>create(..)</code> message to the participant's lifeline or use the dropped participant box notation where it is absolutely clear that the participant does not exist before the create call is invoked. Participant deletion is shown by the ending of the participant's lifeline with the deletion cross.</p>

<p>With some implementation languages, such as Java, you will not have an explicit destroy method, so it doesn't make sense to show one on your sequence diagrams. Example below is one such case where the <code>messageReceiver</code> object will be flagged for destruction when the <code>doSomething(  )</code> method completes its execution. However, no additional messages have to be passed to the <code>messageReceiver</code> to make it destroy itself since this is all handled implicitly by the Java garbage collector.</p>

<pre class="language-java line-numbers">
	<code>
		public class MessageReceiver {
			// Attributes and Methods of the MessageReceiver class
		}

		public class MessageCaller {

			// Other Methods and Attributes of the class are declared here

			public void doSomething(  ) {
				// The MessageReceiver object is created
				MessageReceiver messageReceiver = new MessageReceiver(  );
			}
		}
	</code>
</pre>

<p>In these cases, where another factor such as the garbage collector is involved, you can either leave the object as alive but unused or imply that it is no longer needed by using the destruction cross without an associated destroy method.</p>

![explicit-destroy-message.png]

<p>Let's look at a sequence diagram that is going to model the interactions that need to occur to make the <code>Create a new Regular Blog Account</code> use case happen.</p>

![create-new-regular-blog-account-use-case-diagram.png]

<p>Briefly, the <code>Create a new Regular Blog Account</code> use case is a special case of the <code>Create a new Blog Account</code> use case. It also includes all of the steps provided by the <code>Check Identity</code> use case and may optionally execute the steps provided by the <code>Record Application Failure</code> use case, if the application for a new account is denied.</p>

<p>Before you can specify what types of interaction are going to occur when a use case executes, you need a more detailed description of what the use case does. If you've already completed a use case description, you already have a good reference for this detailed information. Following table shows the steps occur in the <code>Create a new Regular Blog Account</code> use case according to its detailed description.</p>

<table class="table table-dark">
	<thead>
		<tr>
			<th scope="col">Main Flow</th>
			<th scope="col">Step</th>
			<th scope="col">Action</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td></td>
			<td>1</td>
			<td>The Administrator asks the system to create a new blog account.</td>
		</tr>
		<tr>
			<td></td>
			<td>2</td>
			<td>The Administrator selects the regular blog account type.</td>
		</tr>
		<tr>
			<td></td>
			<td>3</td>
			<td>The Administrator enters the author's details.</td>
		</tr>
		<tr>
			<td></td>
			<td>4</td>
			<td>The author's details are checked using the Author Credentials Database.</td>
		</tr>
		<tr>
			<td></td>
			<td>5</td>
			<td>The new regular blog account is created.</td>
		</tr>
		<tr>
			<td></td>
			<td>6</td>
			<td>A summary of the new blog account's details are emailed to the author.</td>
		</tr>
	</tbody>
</table>

<p>Above table only shows the Main Flow—that is the steps that would occur without worrying about any extensions—but this is a good enough starting point for creating a top-level sequence diagram.</p>

![actors-interaction-in-sequence-diagram.png]

<p>At this point, previous figure shows only the interactions that must happen between the external actors and your system because that is the level at which the use case description's steps were written. On the sequence diagram, your system is represented as a single participant, the <code>ContentManagementSystem</code>; however, unless you intend on implementing your content management system as a single monolithic piece of code (generally not a good idea!), it's time to break apart <code>ContentManagementSystem</code> to expose the pieces that go inside.</p>

![system-internals-in-sequence-diagram.png]

<p>Something critical is missing from the sequence diagram in previous diagram.</p>

<p>Following diagram adds the missing pieces to the model to show the actual creation of a regular blog account.</p>

![participant-lifelines-in-sequence-diagram.png]

<p>Participant lifelines are particularly useful when showing that a participant has been created. In previous diagram, the <code>AuthorDetails</code> and <code>RegularBlogAccount</code> participants are not in existence when the sequence diagram begins but they are created during its execution.</p>

<p>Let's say that the <code>authorDetails:AuthorDetails</code> participant is no longer required once the <code>newAccount:RegularBlogAccount</code> has been created. To show that the <code>authorDetails:AuthorDetails</code> participant is discarded at this point, you can use an explicit destroy message connected to the destruction cross.</p>

![descarding-participant-in-sequence-diagram.png]

<p>So far, all of the messages on our example sequence diagram have been <b>synchronous</b>; they are executed one after the other in order, and nothing happens concurrently. However, there is at least one message in the example sequence that is a great candidate for being an asynchronous message.</p>

![irregular-behavior-of-submit.png]

<p>In previous diagram, when the Administrator clicks on the submit button the system freezes, until the new blog account has been created. It would be useful to show that the user interface allows the Administrator to carry on with other tasks while the content management system creates the new account. What we need is for the <code>clickSubmit(  )</code> message to be <b>asynchronous</b>.</p>

<p>Converting the <code>clickSubmit(  )</code> from a synchronous to an asynchronous message means that the sequence diagram now shows that when the new regular blog account information is submitted, the user interface will not lock and wait for the new account to be created. Instead, the user interface allows the Administrator actor to continue working with the system.</p>

<p>For the Administrator to receive feedback as to whether the new blog account has been created, the simple return arrow has to be replaced with a new <code>accountCreationNotification(  )</code> asynchronous message since asynchronous messages do not have return values.</p>

<p>A <b>sequence fragment</b> is represented as a box that encloses a portion of the interactions within a sequence diagram.</p>

![sequence-fragment.png]

<p>A sequence fragment's box overlaps the region of the sequence diagram where the fragment's interactions take place. A fragment box can contain any number of interactions and, for large complex interactions, further nested fragments as well. The top left corner of the fragment box contains an operator. The fragment operator indicates which type of fragment this is.</p>

<p>In previous diagram, the operator is <b>opt</b>, which means that this is an <b>optional fragment</b>. All the interactions contained within the fragment box will be executed according to the result of the fragments guard condition parameter.</p>

<p>Some fragment types do not need additional parameters as part of their specification, such as the <b>ref fragment</b> type discussed in the next section, but the <b>guard condition</b> parameter is needed by the <b>opt fragment</b> type to make a decision as to whether it should execute its interactions or not. In the case of the <b>opt fragment</b> type, the interactions that the fragment contains will be executed only if the associated guard condition logic evaluates to true.</p>

<p>The <b>ref</b> type of sequence fragment finally alleviates some of the maintenance nightmare presented by the huge sequence diagrams that are often created for complex systems. In following diagram, the <b>ref fragment</b> represents a piece of a larger sequence diagram.</p>

![select-account-type-in-ref-fraction.png]

<p>The interactions by which the Administrator actor selects a blog account type for creation are now contained within the referenced sequence fragment. Following diagram shows how the <b>referenced fragment</b> can be expressed on a separate sequence diagram.</p>

![referenced-sequence-diagram.png]

<p>Along with managing the sheer size of large sequence diagrams, the <b>ref fragment</b> also presents an opportunity to reuse a set of common interactions. Several <b>ref fragment</b> boxes can reference the same set of interactions, thereby reusing the interactions in multiple places.</p>

<p>UML 2.0 contains a broad set of different fragment types:</p>

<table class="table table-dark">
	<thead>
		<tr>
			<th scope="col">Type</th>
			<th scope="col">Parameters</th>
			<th scope="col">Why is it useful?</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>ref</td>
			<td>None</td>
			<td>Represents an interaction that is defined elsewhere in the model. Helps you manage a large diagram by splitting, and potentially reusing, a collection of interactions. Similar to the reuse modeled when the <code>&lt;&lt;include&gt;&gt;</code> use case relationship is applied.</td>
		</tr>
		<tr>
			<td>assert</td>
			<td>None</td>
			<td>Specifies that the in teractions contained within the fragment box must occur exactly as they are indicated; otherwise the fragment is declared invalid and an exception should be raised. Works in a similar fashion to the <code>assert</code> statement in Java. Useful when specifying that every step in an interaction(?)</td>
		</tr>
		<tr>
			<td>loop</td>
			<td>min times, max times, [guard_condition]</td>
			<td>Loops through the interactions contained within the fragment a specified number of times until the <b>guard condition</b> is evaluated to false. Very similar to the Java and C# <code>for(..)</code> loop. Useful when you are trying execute a set of interactions a specific number of times.</td>
		</tr>
		<tr>
			<td>break</td>
			<td>None</td>
			<td>If the interactions contained within the break fragment occur, then any enclosing interaction, most commonly a loop fragment , should be exited. Similar to the break statement in Java and C#.</td>
		</tr>
		<tr>
			<td>alt</td>
			<td><p>[guard_condition1] ...</p><p>[guard_condition2] ...</p><p>[else]</p></td>
			<td>Depending on which guard condition evaluates to true first, the corresponding sub-collection of interactions will be executed. Helps you specify that a set of interactions will be executed only under certain conditions. Similar to an if(..) else statement in code.</td>
		</tr>
		<tr>
			<td>opt</td>
			<td>[guard_condition]</td>
			<p>The interactions contained within this fragment will execute only if the guard condition evaluates to true. Similar to a simple if(..) statement in code with no corresponding else. Especially useful when showing steps that have been reused from another use case's sequence diagrams, where <<extend>> is the use case relationship.</p>
		</tr>
		<tr>
			<td>neg</td>
			<td>None</td>
			<td>Declares that the interactions inside this fragment are not to be executed, ever. Helpful if you are just trying to mark a collection of interactions as not executed until you're sure that those interactions can be removed. Most useful if you happen to be lucky enough to be using an Executable UML tool where your sequence diagrams are actually being run. Also can be helpful to show that something cannot be done, e.g., when you want to show that a participant cannot call read(  ) on a socket after close(  ).Works in a similar fashion to commenting out some method calls in code.</td>
		</tr>
		<tr>
			<td>par</td>
			<td>None</td>
			<td>Specifies that interactions within this fragment can happily execute in parallel. This is similar to saying that there is no need for any thread-safe locking required within a set of interactions.</td>
		</tr>
		<tr>
			<td>region</td>
			<td>None</td>
			<td>Interactions within this type of fragment are said to be part of a critical region. A critical region is typically an area where a shared participant is updated. Combined with parallel interactions, specified using the par fragment type, you can model where interactions are not required to be thread- or process-safe (par fragment) and where locks are required to prevent parallel interactions interleaving (region fragment ). Has similarities synchronized blocks and object locks in Java.</td>
		</tr>
	</tbody>
</table>

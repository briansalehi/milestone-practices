<h4>Design Principle</h4>
Classes should be open for extension, but closed for modification.

<h4>The Open-Closed Principle</h4>
While it may seem like a contradiction, there are techniques for allowing
code to be extended without direct modification.

Be careful when choosing the areas of code that need to be extended; applying
the Open-Closed Principle EVERYWHERE is wasteful and unnecessary, and can
lead to complex, hard-to-understand code.

<h4>Decorator Pattern Considerations</h4>
<ul>
	<li>Decorators have the same supertype as the objects they decorate.</li>
	<li>You can use one or more decorators to wrap an object.</li>
	<li>Given that the decorator has the same supertype as the object it
decorates, we can pass around a decorated object in place of the original
(wrapped) object.</li>
	<li>The decorator adds its own behavior before and/or after delegating to
the object it decorates to do the rest of the job.</li>
	<li>Objects can be decorated at any time, so we can decorate objects
dynamically at runtime with as many decorators as we like.</li>
	<li>The Decorator Pattern attaches additional responsibilities to an object
dynamically.</li>
	<li>Decorators provide a flexible alternative to subclassing for extending
functionality.</li>
</ul>

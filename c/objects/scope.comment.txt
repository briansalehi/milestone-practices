ref[2]
An external variable must be defined, exactly once, outside of any function;
this sets aside storage for it. The variable must also be declared in each func-
tion that wants to access it; this states the type of the variable. The declaration
may be an explicit extern statement or may be implicit from context. To
make the discussion concrete

Syntactically, external definitions are just like definitions of  
local variables, but since they occur outside of functions, the variables are  
external. Before a function can use an external variable, the name of the variable  
must be made known to the function. One way to do this is to write an  
extern declaration in the function; the declaration is the same as before except  
for the added keyword extern.

In certain circumstances, the extern declaration can be omitted. If the  
definition of an external variable occurs in the source file before its use in a  
particular function, then there is no need for an extern declaration in the  
function. The extern declarations in main, getline and copy are thus redundant.

In fact, common practice is to place definitions of all external variables at  
the beginning of the source file, and then omit all extern declarations.  
If the program is in several source files, and a variable is defined in file1  
and used in file2 and file3, then extern declarations are needed in file2 and  
file3 to connect the occurrences of the variable. The usual practice is to collect  
extern declarations of variables and functions in a separate file, historically  
called a header, that is included by #include at the front of each source file.  
The suffix .h is conventional for header names. The functions of the standard  
library, for example, are declared in headers like <stdio.h>.

You should note that we are using the words definition and declaration carefully  
when we refer to external variables in this section. "Definition" refers to  
the place where the variable is created or assigned storage; "declaration" refers  
to places where the nature of the variable is stated but no storage is allocated.

External variables are always there even when you don't want them.  
Relying too heavily on external variables is fraught with peril since it  
leads to programs whose data connections are not at all obvious-variables  
can be changed in unexpected and even inadvertent ways, and the program  
is hard to modify.
end[2]

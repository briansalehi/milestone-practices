A string is simply a series of characters. Anything inside quotes is
considered a string in Python, and you can use single or double quotes around
your strings.

One of the simplest tasks you can do with strings is change the case of the
words in a string.

title() displays each word in titlecase, where each word begins with a capital
letter.

The dot (.) after name in name.title() tells Python to make the title() method
act on the variable name. Every method is followed by a set of parentheses,
because methods often need additional information to do their work. That
information is provided inside the parentheses. The title() function doesn’t
need any additional information, so its parentheses are empty.

Several other useful methods are available for dealing with case as well. For
example, you can change a string to all uppercase or all lowercase by upper()
and lower() methods.

It’s often useful to combine strings. For example, you might want to store a
first name and a last name in separate variables, and then combine them when
you want to display someone’s full name.

Python uses the plus symbol (+) to combine strings.

In programming, whitespace refers to any nonprinting character, such as
spaces, tabs, and end-of-line symbols. You can use whitespace to organize your
output so it’s easier for users to read.

To add a tab to your text, use the character combination \t and to add a
newline in a string, use the character combination \n.

Extra whitespace can be confusing in your programs.
Python can look for extra whitespace on the right and left sides of a string.
To ensure that no whitespace exists at the right end of a string, use the
rstrip() method.

One kind of error that you might see with some regularity is a syntax error. A
syntax error occurs when Python doesn’t recognize a section of your program as
valid Python code. For example, if you use an apostrophe within single quotes,
you’ll produce an error. This happens because Python interprets everything
between the first single quote and the apostrophe as a string. It then tries
to interpret the rest of the text as Python code, which causes errors.

The apostrophe appears inside a set of double quotes, so the Python
interpreter has no trouble reading the string correctly. Opposite can be done
by writing a string with apostrophes and insert double quotes in the string.

When you use integers within strings like this, you need to specify explicitly
that you want Python to use the integer as a string of characters. You can do
this by wrapping the variable in the str() function, which tells Python to
represent non-string values as strings.

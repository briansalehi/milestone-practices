The Python list object is the most general sequence provided by the language.
Lists are positionally ordered collections of arbitrarily typed objects, and
they have no fixed size.
They are also mutable; unlike strings, lists can be modified in place by
assignment to offsets as well as a variety of list method calls.

Because they are sequences, lists support all the sequence operations on
strings; the only difference is that the results are usually lists instead of
strings.

<h5>type specific operations in list<h5>
Pythonâ€™s lists may be reminiscent of arrays in other languages, but they tend
to be more powerful. For one thing, they have no fixed type constraint; the
list in the code section, for example, contains three objects of completely
different types (an integer, a string, and a floating-point number).
Further, lists have no fixed size. That is, they can grow and shrink on
demand, in response to list-specific operations.

Because lists are mutable, most list methods also change the list object in
place, instead of creating a new one. e.g. sort(), reverse(), etc.

<p>This first program illustrates the basic structure of an assembly program.</p>

<pre class="language-nasm line-numbers">
	<code>
		section .data
			message db 'hello, world', 10, 0
			length equ $ - message - 1

		section .bss
		section .text
			global main

		main:
			mov rax, 1			; write system call
			mov rdi, 1			; standard output
			mov rsi, message	; message address in memory
			mov rdx, length		; length of message
			syscall

			mov rax, 60			; exit system call
			mov rdi, 0			; return 0
			syscall
	</code>
</pre>

<p>The following are the main parts of an assembly program:</p>

<ul>
	<li>section .data</li>
	<li>section .bss</li>
	<li>section .text</li>
</ul>

<p>In section <code>.data</code>, initialized data is declared and defined, in the following format:</p>

<pre class="language-nasm">
	<code>
		&lt;variable name&gt; &lt;type&gt; &lt;value&gt;
	</code>
</pre>

<p>Variable names start with a letter, followed by letters or numbers or special characters.</p>

<p>When a variable is included in section <code>.data</code>, memory is allocated for that variable when the source code is assembled and linked to an executable.</p>

<p>Section <code>.data</code> can also contain constants, which are values that cannot be changed in the program. They are declared in the following format:</p>

<pre class="language-nasm">
	<code>
		&lt;constant name&gt; equ &lt;value&gt;
	</code>
</pre>

<table class="table table-dark">
  <thead>
    <tr>
      <th scope="col">Type</th>
      <th scope="col">Length</th>
      <th scope="col">Name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>db</td>
      <td>8 bits</td>
      <td>Byte</td>
    </tr>
    <tr>
      <td>dw</td>
      <td>16 bits</td>
      <td>Word</td>
    </tr>
    <tr>
      <td>dd</td>
      <td>32 bits</td>
      <td>Double word</td>
    </tr>
    <tr>
      <td>dq</td>
      <td>64 bits</td>
      <td>Quadword</td>
    </tr>
  </tbody>
</table>

<p>Variable names start with a letter, followed by letters or numbers or special characters.</p>

<p>The acronym <i>bss</i> stands for <b>Block Started by Symbol</b>, and its history goes back to the fifties, when it was part of assembly language developed for the IBM 704. In this section go the uninitialized variables. Space for uninitialized variables is declared in this section, in the following format:</p>

<pre class="language-nasm">
	<code>
		&lt;variable name&gt; &lt;type&gt; &lt;number&gt;
	</code>
</pre>

<p>When a variable is included in section <code>.data</code>, memory is allocated for that variable when the source code is assembled and linked to an executable. Variable names are symbolic names, and references to memory locations and a variable can take one or more memory locations. The variable name refers to the start address of the variable in memory.</p>

<table class="table table-dark">
  <thead>
    <tr>
      <th scope="col">Type</th>
      <th scope="col">Length</th>
      <th scope="col">Name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>resb</td>
      <td>8 bits</td>
      <td>Byte</td>
    </tr>
    <tr>
      <td>resw</td>
      <td>16 bits</td>
      <td>Word</td>
    </tr>
    <tr>
      <td>resd</td>
      <td>32 bits</td>
      <td>Double word</td>
    </tr>
    <tr>
      <td>resq</td>
      <td>64 bits</td>
      <td>Quadword</td>
    </tr>
  </tbody>
</table>

<p>The variables in section <code>.bss</code> do not contain any values; the values will be assigned later at execution time. Memory places are not reserved at compile time but at execution time.</p>

<p>When your program starts executing, the program asks for the needed memory from the operating system, allocated to variables in section <code>.bss</code> and initialized to zeros. If there is not enough memory available for the <code>.bss</code> variables at execution time, the program will crash.</p>

<p>Section <code>.txt</code> is where all the action is. This section contains the program code and starts with the following:</p>

<pre class="language-nasm line-numbers" data-line="4">
	<code>
		section .text
			global main

		main:
			...
	</code>
</pre>

<p>The <code>main:</code> part is called a label. Registers such as <b>rdi</b>, <b>rsi</b>, and <b>rax</b> are prepared for outputting a message on the screen. We write 1 into register <code>rax</code> in order to tell the operating system to write our message into output stream, which is basically the terminal we are executing this program in.</p>

<pre class="language-nasm line-numbers" data-line="1">
	<code>
		mov rax, 1			; write system call
		mov rdi, 1			; standard output
		mov rsi, message	; message address in memory
		mov rdx, length		; length of message
		syscall
	</code>
</pre>

<p>To put some value into a register, we use the instruction <code>mov</code>. In reality, this instruction does not move anything; it makes a copy from the source to the destination. The format is as follows:</p>

<pre class="language-nasm">
	<code>
		mov destination, source
	</code>
</pre>

<p>The instruction <code>mov</code> can be used as follows:</p>

<pre class="language-nasm">
	<code>
		mov register, immediate value ; legal
		mov register, memory ; legal
		mov memory, register ; legal
		mov memory, memory ; illegal
	</code>
</pre>

<p>In our code, the output destination for writing is stored into the register <code>rdi</code>, and 1 means standard output (in this case, output to your screen).</p>

<pre class="language-nasm line-numbers" data-line="2">
	<code>
		mov rax, 1			; write system call
		mov rdi, 1			; standard output
		mov rsi, message	; message address in memory
		mov rdx, length		; length of message
		syscall
	</code>
</pre>

<p>The address of the string to be displayed is put into register <code>rsi</code>.</p>

<pre class="language-nasm line-numbers" data-line="3">
	<code>
		mov rax, 1			; write system call
		mov rdi, 1			; standard output
		mov rsi, message	; message address in memory
		mov rdx, length		; length of message
		syscall
	</code>
</pre>

<p>In register <code>rdx</code>, we place the message length.</p>

<pre class="language-nasm line-numbers" data-line="4">
	<code>
		mov rax, 1			; write system call
		mov rdi, 1			; standard output
		mov rsi, message	; message address in memory
		mov rdx, length		; length of message
		syscall
	</code>
</pre>

<p>Then the system call, <code>syscall</code>, is executed, and the string, <code>message</code>, will be displayed on the standard output.</p>

<pre class="language-nasm line-numbers" data-line="5">
	<code>
		mov rax, 1			; write system call
		mov rdi, 1			; standard output
		mov rsi, message	; message address in memory
		mov rdx, length		; length of message
		syscall
	</code>
</pre>

<p>Here, we will display a string on the screen using a system call. That is, we will ask the operating system to do the work for us.</p>

<p>A <code>syscall</code> is a call to functionality provided by the operating system.</p>

<p>System calls are used to ask the operating system to do specific actions. Every operating system has a different list of system call parameters, and the system calls for Linux are different from Windows or macOS. We use the Linux system calls for x64 in this book; you can find more details at <a href="http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/">Linux System Call Table for x86_64</a>.</p>

<p>Be aware that 32-bit system calls differ from 64-bit system calls.</p>

<p>To avoid error messages when the program finishes, a clean program exit is needed. We start with writing 60 into <code>rax</code>, which indicates “exit.” The “success” exit code 0 goes into <code>rdi</code>, and then a system call is executed. The program exits without complaining.</p>

<pre class="language-nasm line-numbers" data-line="">
	<code>
		mov rax, 60			; exit system call
		mov rdi, 0			; return 0
		syscall
	</code>
</pre>
